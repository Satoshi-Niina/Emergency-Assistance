FROM node:20-alpine AS builder

WORKDIR /app

# 各package.jsonを分けてインストール
COPY package*.json ./             # サーバー用
COPY client/package*.json ./client/  # クライアント用
COPY shared/package*.json ./shared/  # 共有ライブラリ用

# サーバー依存関係インストール
RUN npm ci --ignore-scripts && npm cache clean --force

# 共有ライブラリ依存関係インストール
WORKDIR /app/shared
RUN npm ci && npm cache clean --force

# クライアント依存関係インストール
WORKDIR /app/client
RUN npm ci && npm cache clean --force

# 戻ってすべてコピー
WORKDIR /app
COPY . .

# 共有ライブラリビルド
WORKDIR /app/shared
RUN npm run build

# 共有ライブラリをdistディレクトリにコピー
WORKDIR /app
RUN mkdir -p dist && cp -r shared/dist dist/shared

# クライアントビルド
WORKDIR /app/client
RUN npm run build

# サーバービルドとパス修正
WORKDIR /app
RUN npm run build:server
RUN npm run fix:paths

# vite.configファイルをdistディレクトリにコピー
RUN cp vite.config.js dist/

# 本番環境ステージ
FROM node:20-alpine AS production

WORKDIR /app

COPY package*.json ./
RUN npm ci && npm cache clean --force

COPY --from=builder /app/dist ./dist
COPY --from=builder /app/client/dist ./client/dist
COPY --from=builder /app/shared/dist ./shared/dist
COPY --from=builder /app/public ./public
COPY --from=builder /app/knowledge-base ./knowledge-base
COPY --from=builder /app/uploads ./uploads
COPY --from=builder /app/web.config ./web.config
COPY --from=builder /app/vite.config.js ./vite.config.js
COPY --from=builder /app/dist/vite.config.js ./dist/vite.config.js

ENV NODE_ENV=production
ENV PORT=8080

HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:8080/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

EXPOSE 8080

CMD ["node", "dist/server/index.js"]
