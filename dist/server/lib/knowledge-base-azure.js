import { azureStorage } from './azure-storage.js';
import * as fs from 'fs-extra';
import * as path from 'path';
export class KnowledgeBaseAzureService {
    constructor() {
        this.localKnowledgeBasePath = path.join(process.cwd(), 'knowledge-base');
        this.remotePrefix = 'knowledge-base';
    }
    // Azure Storage„Åã„ÇâKnowledge Base„ÇíÂêåÊúü
    async syncFromAzure() {
        try {
            console.log('üîÑ Syncing knowledge base from Azure Storage...');
            // Azure Storage„Åã„Çâ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
            await azureStorage.downloadDirectory(this.remotePrefix, this.localKnowledgeBasePath);
            console.log('‚úÖ Knowledge base synced from Azure Storage');
        }
        catch (error) {
            console.error('‚ùå Failed to sync knowledge base from Azure:', error);
            throw error;
        }
    }
    // Knowledge Base„ÇíAzure Storage„Å´ÂêåÊúü
    async syncToAzure() {
        try {
            console.log('üîÑ Syncing knowledge base to Azure Storage...');
            // „É≠„Éº„Ç´„É´„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåÂ≠òÂú®„Åô„Çã„ÅãÁ¢∫Ë™ç
            if (!await fs.pathExists(this.localKnowledgeBasePath)) {
                console.log('üìÅ Creating local knowledge base directory...');
                await fs.ensureDir(this.localKnowledgeBasePath);
            }
            // Azure Storage„Å´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
            await azureStorage.uploadDirectory(this.localKnowledgeBasePath, this.remotePrefix);
            console.log('‚úÖ Knowledge base synced to Azure Storage');
        }
        catch (error) {
            console.error('‚ùå Failed to sync knowledge base to Azure:', error);
            throw error;
        }
    }
    // ÁâπÂÆö„ÅÆ„Éï„Ç°„Ç§„É´„ÇíAzure Storage„Å´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
    async uploadFile(localFilePath) {
        try {
            const relativePath = path.relative(this.localKnowledgeBasePath, localFilePath);
            const blobName = `${this.remotePrefix}/${relativePath}`;
            const url = await azureStorage.uploadFile(localFilePath, blobName);
            console.log(`‚úÖ File uploaded to Azure: ${relativePath}`);
            return url;
        }
        catch (error) {
            console.error(`‚ùå Failed to upload file to Azure: ${localFilePath}`, error);
            throw error;
        }
    }
    // ÁâπÂÆö„ÅÆ„Éï„Ç°„Ç§„É´„ÇíAzure Storage„Åã„Çâ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
    async downloadFile(blobName) {
        try {
            const localFilePath = path.join(this.localKnowledgeBasePath, blobName.replace(`${this.remotePrefix}/`, ''));
            await azureStorage.downloadFile(blobName, localFilePath);
            console.log(`‚úÖ File downloaded from Azure: ${blobName}`);
            return localFilePath;
        }
        catch (error) {
            console.error(`‚ùå Failed to download file from Azure: ${blobName}`, error);
            throw error;
        }
    }
    // „Éï„Ç°„Ç§„É´„ÅÆÂ≠òÂú®Á¢∫Ë™çÔºàAzure StorageÔºâ
    async fileExistsInAzure(relativePath) {
        const blobName = `${this.remotePrefix}/${relativePath}`;
        return await azureStorage.fileExists(blobName);
    }
    // „Éï„Ç°„Ç§„É´„ÅÆURL„ÇíÂèñÂæóÔºàAzure StorageÔºâ
    getFileUrl(relativePath) {
        const blobName = `${this.remotePrefix}/${relativePath}`;
        return azureStorage.getFileUrl(blobName);
    }
    // Knowledge Base„ÅÆÂàùÊúüÂåñ
    async initialize() {
        try {
            console.log('üöÄ Initializing Knowledge Base Azure integration...');
            // Azure Storage„Ç≥„É≥„ÉÜ„Éä„ÇíÂàùÊúüÂåñ
            await azureStorage.initializeContainer();
            // „É≠„Éº„Ç´„É´„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê
            await fs.ensureDir(this.localKnowledgeBasePath);
            // Azure Storage„Åã„ÇâÂêåÊúü
            await this.syncFromAzure();
            console.log('‚úÖ Knowledge Base Azure integration initialized');
        }
        catch (error) {
            console.error('‚ùå Failed to initialize Knowledge Base Azure integration:', error);
            throw error;
        }
    }
    // „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Çí‰ΩúÊàê
    async createBackup() {
        try {
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const backupPrefix = `backups/${timestamp}`;
            console.log(`üîÑ Creating backup: ${backupPrefix}`);
            await azureStorage.uploadDirectory(this.localKnowledgeBasePath, backupPrefix);
            console.log(`‚úÖ Backup created: ${backupPrefix}`);
        }
        catch (error) {
            console.error('‚ùå Failed to create backup:', error);
            throw error;
        }
    }
    // „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Åã„ÇâÂæ©ÂÖÉ
    async restoreFromBackup(backupPrefix) {
        try {
            console.log(`üîÑ Restoring from backup: ${backupPrefix}`);
            // ÁèæÂú®„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const currentBackupPrefix = `backups/restore-${timestamp}`;
            await azureStorage.uploadDirectory(this.localKnowledgeBasePath, currentBackupPrefix);
            // „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Åã„ÇâÂæ©ÂÖÉ
            await azureStorage.downloadDirectory(backupPrefix, this.localKnowledgeBasePath);
            console.log(`‚úÖ Restored from backup: ${backupPrefix}`);
        }
        catch (error) {
            console.error(`‚ùå Failed to restore from backup: ${backupPrefix}`, error);
            throw error;
        }
    }
    // „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó‰∏ÄË¶ß„ÇíÂèñÂæó
    async listBackups() {
        try {
            const files = await azureStorage.listFiles('backups/');
            const backups = new Set();
            for (const file of files) {
                const parts = file.split('/');
                if (parts.length >= 2) {
                    backups.add(parts[1]); // backups/[timestamp] „ÅÆÈÉ®ÂàÜ„ÇíÂèñÂæó
                }
            }
            return Array.from(backups).sort().reverse(); // Êñ∞„Åó„ÅÑÈ†Ü
        }
        catch (error) {
            console.error('‚ùå Failed to list backups:', error);
            throw error;
        }
    }
    // „Éï„Ç°„Ç§„É´Â§âÊõ¥„ÇíÁõ£Ë¶ñ„Åó„Å¶Ëá™ÂãïÂêåÊúü
    async watchAndSync() {
        try {
            console.log('üëÄ Starting file watch for auto-sync...');
            // „Éï„Ç°„Ç§„É´Â§âÊõ¥„ÇíÁõ£Ë¶ñÔºàÁ∞°ÊòìÁâàÔºâ
            const watcher = fs.watch(this.localKnowledgeBasePath, { recursive: true });
            let syncTimeout;
            watcher.on('change', (eventType, filename) => {
                if (filename && !filename.includes('node_modules') && !filename.includes('.git')) {
                    console.log(`üìù File changed: ${filename}`);
                    // „Éá„Éê„Ç¶„É≥„ÇπÂá¶ÁêÜÔºà1ÁßíÂæå„Å´ÂêåÊúüÔºâ
                    clearTimeout(syncTimeout);
                    syncTimeout = setTimeout(async () => {
                        try {
                            await this.syncToAzure();
                        }
                        catch (error) {
                            console.error('‚ùå Auto-sync failed:', error);
                        }
                    }, 1000);
                }
            });
            console.log('‚úÖ File watch started');
        }
        catch (error) {
            console.error('‚ùå Failed to start file watch:', error);
            throw error;
        }
    }
}
// „Ç∑„É≥„Ç∞„É´„Éà„É≥„Ç§„É≥„Çπ„Çø„É≥„Çπ
export const knowledgeBaseAzure = new KnowledgeBaseAzureService();
