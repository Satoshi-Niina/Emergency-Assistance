
Assistant suggestions
app.get('/', (req, res) => {
  res.status(200).send('OK');
});
app.get('/', (req, res) => {
  res.status(200).json({ status: 'healthy', timestamp: new Date().toISOString() });
});
async function initializePostStartup() {
  try {
    if (process.env.NODE_ENV === 'production') {
      // プロダクション環境では非同期で初期化（ヘルスチェックをブロックしない）
      setImmediate(async () => {
        try {
          console.log("知識ベースの初期化を開始...");
          await initializeKnowledgeBase();
          console.log("知識ベースの初期化完了");
        } catch (err) {
          console.error("初期化時にエラーが発生:", err);
        }
      });
    } else {
      // 開発環境では即座に初期化
      secureLog("知識ベースの初期化を開始...");
      await initializeKnowledgeBase();
      secureLog("知識ベースの初期化完了");
    }
  } catch (err) {
    console.error("初期化時にエラーが発生:", err);
  }
}
async function initializePostStartup() {
  // Always defer heavy initialization in production to avoid blocking health checks
  setTimeout(async () => {
    try {
      console.log("知識ベースの初期化を開始...");
      await initializeKnowledgeBase();
      console.log("知識ベースの初期化完了");
    } catch (err) {
      console.error("初期化時にエラーが発生:", err);
    }
  }, 1000); // Delay initialization by 1 second
}
server.listen(port, '0.0.0.0', () => {
server.listen(port, '0.0.0.0', () => {
app.get('/health', (req, res) => {
  res.status(200).json({ status: 'healthy' });
});
app.get('/health', (req, res) => {
  // Respond immediately for deployment health checks
  res.status(200).json({ 
    status: 'healthy',
    timestamp: new Date().toISOString(),
    port: port
  });
});
if (process.env.NODE_ENV !== "production") {
    await setupVite(app, server);
  } else {
    try {
      serveStatic(app);
      secureLog('静的ファイル配信を設定しました');
    } catch (staticError) {
      console.error('静的ファイル配信の設定エラー:', staticError);
      // Minimal fallback for production
      app.get('*', (req, res) => {
        res.status(200).send('Server running');
      });
    }
  }
if (process.env.NODE_ENV !== "production") {
    await setupVite(app, server);
  } else {
    try {
      serveStatic(app);
      console.log('Static files configured');
    } catch (staticError) {
      console.error('Static file setup error:', staticError);
      // Fallback: serve a simple response for non-API routes
      app.get('*', (req, res) => {
        if (!req.path.startsWith('/api/')) {
          res.status(200).send('<!DOCTYPE html><html><body><h1>Server Running</h1></body></html>');
        } else {
          res.status(404).json({ error: 'API endpoint not found' });
        }
      });
    }
  }