import React, { useState, useEffect } from 'react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';

interface StepOption {
  text: string;
  condition: string;
  nextStepId: string;
}

interface Step {
  id: string;
  type: 'step' | 'decision';
  title: string;
  message: string;
  options: StepOption[];
}

interface FlowData {
  id: string;
  title: string;
  steps: Step[];
}

interface Props {
  flowData: FlowData;
  onUpdate: (updatedFlow: FlowData) => void;
}

const TroubleshootingTextEditor: React.FC<Props> = ({ flowData, onUpdate }) => {
  const [localFlow, setLocalFlow] = useState<FlowData>(flowData);

  useEffect(() => {
    setLocalFlow(flowData);
  }, [flowData]);

  const handleStepTitleChange = async (stepId: string, newTitle: string) => {
    const updatedSteps = localFlow.steps.map((step) =>
      step.id === stepId ? { ...step, title: newTitle } : step
    );
    const updatedFlow = { ...localFlow, steps: updatedSteps };
    setLocalFlow(updatedFlow);
    onUpdate(updatedFlow);

    await fetch(`/api/troubleshooting/save/${flowData.id}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Complete-Replace': 'false'
      },
      body: JSON.stringify({
        action: 'updateStepTitle',
        stepId,
        title: newTitle
      })
    });
  };

  const handleOptionChange = async (
    stepId: string,
    optionIndex: number,
    field: 'text' | 'condition',
    value: string
  ) => {
    const updatedSteps = localFlow.steps.map((step) => {
      if (step.id !== stepId || step.type !== 'decision') return step;
      const updatedOptions = [...step.options];
      updatedOptions[optionIndex] = {
        ...updatedOptions[optionIndex],
        [field]: value
      };
      return { ...step, options: updatedOptions };
    });

    const updatedFlow = { ...localFlow, steps: updatedSteps };
    setLocalFlow(updatedFlow);
    onUpdate(updatedFlow);

    await fetch(`/api/troubleshooting/save/${flowData.id}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Complete-Replace': 'false'
      },
      body: JSON.stringify({
        action: 'updateStepOption',
        stepId,
        options: updatedFlow.steps.find((s) => s.id === stepId)?.options || []
      })
    });
  };

  return (
    <div className="p-4 space-y-6">
      {localFlow.steps.map((step) => (
        <div key={step.id} className="border p-4 rounded shadow">
          <div className="mb-2">
            <label className="block text-sm font-bold">タイトル:</label>
            <Input
              value={step.title}
              onChange={(e) => handleStepTitleChange(step.id, e.target.value)}
            />
          </div>

          {step.type === 'decision' && (
            <div>
              <label className="block text-sm font-bold mb-1">条件分岐の選択肢:</label>
              {step.options.length === 0 && (
                <div className="mb-2 text-sm text-gray-500">条件が設定されていません。</div>
              )}
              {step.options.map((option, index) => (
                <div key={index} className="mb-2 space-y-1">
                  <Input
                    placeholder="選択肢テキスト"
                    value={option.text}
                    onChange={(e) =>
                      handleOptionChange(step.id, index, 'text', e.target.value)
                    }
                  />
                  <Input
                    placeholder="条件"
                    value={option.condition}
                    onChange={(e) =>
                      handleOptionChange(step.id, index, 'condition', e.target.value)
                    }
                  />
                </div>
              ))}
            </div>
          )}
        </div>
      ))}
    </div>
  );
};

export default TroubleshootingTextEditor;
