① emergency-guide.tsx（削除ファイルが再表示されない）
🔧 追加・修正箇所：useEffect に flowDataUpdated イベント対応を追加

tsx
コピーする
編集する
useEffect(() => {
  const refreshFlowList = async () => {
    try {
      const response = await fetch(`/api/emergency-flow/list?ts=${Date.now()}`);
      if (!response.ok) throw new Error("読み込み失敗");
      const data = await response.json();
      setFlowList(Array.isArray(data) ? data : []);
    } catch (err) {
      console.error("フロー一覧取得エラー", err);
    }
  };

  window.addEventListener("flowDataUpdated", refreshFlowList);
  return () => window.removeEventListener("flowDataUpdated", refreshFlowList);
}, []);
✅ ② emergency-flow-creator.tsx（保存されない不具合修正）
🔧 保存後にデータを初期化していた部分を削除し、保存したデータを再設定

tsx
コピーする
編集する
if (result.success) {
  toast({
    title: "保存成功",
    description: `応急処置フローが保存されました: ${result.fileName}`,
  });

  await fetchFlowList();

  // 🔽 修正点：flowData を初期化しない
  setFlowData(saveData);
  setCharacterDesignTab('file'); // ファイル一覧に戻るだけにする
}
✅ ③ emergency-flow-editor.tsx（タイトル編集 + 判断ノード条件保存）
🛠 追加 UI：ノードタイトル編集欄
tsx
コピーする
編集する
{selectedNode && (
  <div className="mb-2">
    <Label htmlFor="node-label">スライドタイトル</Label>
    <Input
      id="node-label"
      value={selectedNode.data.label || ''}
      onChange={(e) => updateNodeData('label', e.target.value)}
    />
  </div>
)}
🛠 判断ノード用：条件項目（yes/no/other）編集欄
tsx
コピーする
編集する
{selectedNode?.type === 'decision' && (
  <>
    <Label>はい（yes）の条件</Label>
    <Input
      value={selectedNode.data.yesCondition || ''}
      onChange={(e) => updateNodeData('yesCondition', e.target.value)}
    />
    <Label>いいえ（no）の条件</Label>
    <Input
      value={selectedNode.data.noCondition || ''}
      onChange={(e) => updateNodeData('noCondition', e.target.value)}
    />
    <Label>その他（other）の条件</Label>
    <Input
      value={selectedNode.data.otherCondition || ''}
      onChange={(e) => updateNodeData('otherCondition', e.target.value)}
    />
  </>
)}
🛠 useEffect：初期読み込み時に条件データを復元する処理
tsx
コピーする
編集する
useEffect(() => {
  if (Array.isArray(initialData?.nodes)) {
    const enhanced = initialData.nodes.map(node => {
      if (node.type === 'decision') {
        const match = initialData.steps?.find(step => step.id === node.id);
        if (match) {
          return {
            ...node,
            data: {
              ...node.data,
              yesCondition: match.yesCondition || '',
              noCondition: match.noCondition || '',
              otherCondition: match.otherCondition || ''
            }
          };
        }
      }
      return node;
    });
    setNodes(enhanced);
  }
}, [initialData]);
🛠 保存時：step に条件項目を含める（既に対応済だが再確認）
tsx
コピーする
編集する
if (node.type === 'decision') {
  step.yesCondition = node.data.yesCondition || '';
  step.noCondition = node.data.noCondition || '';
  step.otherCondition = node.data.otherCondition || '';
}