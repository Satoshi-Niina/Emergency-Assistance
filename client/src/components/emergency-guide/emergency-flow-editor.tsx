import React, { useState, useEffect, useCallback, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { Save, Plus, Trash2, Edit, Check, X, GitBranch, Settings } from 'lucide-react';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";

interface FlowStep {
  id: string;
  title: string;
  description: string;
  message: string;
  type: 'start' | 'step' | 'decision' | 'end';
  imageUrl?: string;
  options: Array<{
    text: string;
    nextStepId: string;
    isTerminal: boolean;
    conditionType: 'yes' | 'no' | 'other';
    condition?: string;
  }>;
  // Êù°‰ª∂ÂàÜÂ≤êÁî®„ÅÆËøΩÂä†„Éï„Ç£„Éº„É´„Éâ
  conditions?: Array<{
    label: string;
    nextId: string;
  }>;
}

interface FlowData {
  id: string;
  title: string;
  description: string;
  triggerKeywords: string[];
  steps: FlowStep[];
  updatedAt?: string;
}

interface EmergencyFlowEditorProps {
  flowData: FlowData | null;
  onSave?: (data: FlowData) => void;
  selectedFilePath?: string | null;
}

const EmergencyFlowEditor: React.FC<EmergencyFlowEditorProps> = ({ flowData, onSave, selectedFilePath }) => {
  const { toast } = useToast();
  const [editedFlow, setEditedFlow] = useState<FlowData | null>(null);
  const [originalFlow, setOriginalFlow] = useState<FlowData | null>(null);
  const [isSaving, setIsSaving] = useState(false);
  const [editingStepId, setEditingStepId] = useState<string | null>(null);
  const [editingTitle, setEditingTitle] = useState(false);
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [stepToDelete, setStepToDelete] = useState<string | null>(null);
  const [editingStepTitle, setEditingStepTitle] = useState<string | null>(null);

  // flowData„ÅåÂ§âÊõ¥„Åï„Çå„Åü„ÇâÁ∑®ÈõÜÁî®„Éá„Éº„Çø„Å®„Ç™„É™„Ç∏„Éä„É´„Éá„Éº„Çø„ÇíÊõ¥Êñ∞
  useEffect(() => {
    console.log('üîÑ flowDataÂ§âÊõ¥Ê§úÁü•:', flowData);

    if (flowData) {
      // slides„Åã„Çâsteps„Å∏„ÅÆÂ§âÊèõ„ÇÇÂê´„ÇÅ„Åü„Éá„Éº„Çø„ÅÆÊï¥ÂêàÊÄß„ÇíÁ¢∫Ë™ç„Éª‰øÆÊ≠£
      const processedData = {
        ...flowData,
        steps: (flowData.steps || flowData.slides || [])?.map(step => {
          console.log(`üîç „Çπ„ÉÜ„ÉÉ„Éó ${step.id} (${step.type}) „ÅÆ„Ç™„Éó„Ç∑„Éß„É≥:`, step.options);

          // üîÄ Êù°‰ª∂ÂàÜÂ≤ê„Éé„Éº„ÉâÔºöÂÆåÂÖ®„Éá„Éº„ÇøÂá¶ÁêÜÔºàÁ∑®ÈõÜUIÁî®Ôºâ
            if (step.type === 'decision') {
              const existingOptions = step.options || [];
              console.log(`üîÄ Êù°‰ª∂ÂàÜÂ≤ê„Éé„Éº„Éâ ${step.id} Á∑®ÈõÜUIÊ∫ñÂÇô:`, {
                stepId: step.id,
                stepType: step.type,
                title: step.title,
                existingOptionsCount: existingOptions.length,
                existingOptionsData: existingOptions,
                hasLegacyFields: !!(step.yesCondition || step.noCondition || step.otherCondition)
              });

              // Êóß„Çπ„Ç≠„Éº„Éû„Åã„ÇâÊñ∞„Çπ„Ç≠„Éº„Éû„Å∏„ÅÆÂ§âÊèõ„ÇÇÂê´„ÇÄ
              let processedOptions = [];

              if (existingOptions.length > 0) {
                // Êñ∞„Çπ„Ç≠„Éº„Éû„ÅÆÂ†¥Âêà
                processedOptions = existingOptions.map((option, index) => {
                  const processedOption = {
                    text: option.text || `Êù°‰ª∂È†ÖÁõÆ ${index + 1}`,
                    nextStepId: option.nextStepId || '',
                    isTerminal: Boolean(option.isTerminal),
                    conditionType: (option.conditionType as 'yes' | 'no' | 'other') || 'other',
                    condition: option.condition || option.text || ''
                  };
                  console.log(`üîß Êó¢Â≠òÊù°‰ª∂È†ÖÁõÆ ${index + 1} Âá¶ÁêÜ:`, processedOption);
                  return processedOption;
                });
              } else if (step.yesCondition || step.noCondition || step.otherCondition) {
                // Êóß„Çπ„Ç≠„Éº„Éû„Åã„Çâ„ÅÆÂ§âÊèõ
                if (step.yesCondition) {
                  processedOptions.push({
                    text: '„ÅØ„ÅÑ',
                    nextStepId: step.yesNextStepId || '',
                    isTerminal: false,
                    conditionType: 'yes' as const,
                    condition: step.yesCondition
                  });
                }
                if (step.noCondition) {
                  processedOptions.push({
                    text: '„ÅÑ„ÅÑ„Åà',
                    nextStepId: step.noNextStepId || '',
                    isTerminal: false,
                    conditionType: 'no' as const,
                    condition: step.noCondition
                  });
                }
                if (step.otherCondition) {
                  processedOptions.push({
                    text: '„Åù„ÅÆ‰ªñ',
                    nextStepId: step.otherNextStepId || '',
                    isTerminal: false,
                    conditionType: 'other' as const,
                    condition: step.otherCondition
                  });
                }
                console.log(`üîÑ Êóß„Çπ„Ç≠„Éº„Éû„Åã„ÇâÂ§âÊèõ:`, processedOptions);
              } else {
                // „Éá„Éï„Ç©„É´„Éà„ÅÆÊù°‰ª∂È†ÖÁõÆ
                processedOptions = [
                  { text: '„ÅØ„ÅÑ', nextStepId: '', isTerminal: false, conditionType: 'yes' as const, condition: '' },
                  { text: '„ÅÑ„ÅÑ„Åà', nextStepId: '', isTerminal: false, conditionType: 'no' as const, condition: '' }
                ];
              }

              console.log(`‚úÖ Êù°‰ª∂ÂàÜÂ≤ê„Éé„Éº„Éâ ${step.id} Á∑®ÈõÜUIÊ∫ñÂÇôÂÆå‰∫Ü:`, {
                finalOptionsCount: processedOptions.length,
                finalOptionsData: processedOptions
              });

              return {
                ...step,
                id: step.id,
                title: step.title || 'Êñ∞„Åó„ÅÑÊù°‰ª∂ÂàÜÂ≤ê',
                description: step.description || step.message || '',
                message: step.message || step.description || '',
                type: 'decision',
                options: processedOptions
              };
          } else {
            // ÈÄöÂ∏∏„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó„ÅÆÂ†¥Âêà
            return {
              ...step,
              description: step.description || step.message || '',
              message: step.message || step.description || '',
              options: step.options || [{
                text: 'Ê¨°„Å∏', 
                nextStepId: '', 
                isTerminal: false, 
                conditionType: 'other' as const,
                condition: ''
              }]
            };
          }
        }) || []
      };

      console.log('üìä flowData„ÇísetEditedFlow„Å´Ë®≠ÂÆö:', {
        id: processedData.id,
        title: processedData.title,
        stepsCount: processedData.steps?.length || 0,
        updatedAt: processedData.updatedAt,
        decisionSteps: processedData.steps?.filter(s => s.type === 'decision').length || 0,
        decisionStepsDetail: processedData.steps?.filter(s => s.type === 'decision').map(s => ({
          id: s.id,
          title: s.title,
          optionsCount: s.options?.length || 0
        }))
      });

      setEditedFlow(processedData);
      setOriginalFlow(flowData); // ÂÖÉ„Éá„Éº„Çø„Çí‰øùÊåÅ
    } else {
      // Êñ∞Ë¶è‰ΩúÊàê„ÅÆÂ†¥Âêà
      const newFlow: FlowData = {
        id: `flow_${Date.now()}`,
        title: 'Êñ∞„Åó„ÅÑÂøúÊÄ•Âá¶ÁΩÆ„Éï„É≠„Éº',
        description: '',
        triggerKeywords: [],
        steps: [{
          id: 'start',
          title: 'ÈñãÂßã',
          description: '',
          message: '„Éï„É≠„Éº„ÇíÈñãÂßã„Åó„Åæ„Åô',
          type: 'start',
          options: [{
            text: 'Ê¨°„Å∏',
            nextStepId: '',
            isTerminal: false,
            conditionType: 'other'
          }]
        }],
        updatedAt: new Date().toISOString()
      };
      console.log('üÜï Êñ∞Ë¶è„Éï„É≠„Éº‰ΩúÊàê:', newFlow);
      setEditedFlow(newFlow);
      setOriginalFlow(null);
    }
  }, [flowData]);

  // „Éá„Éº„ÇøÊõ¥Êñ∞„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÇíËøΩÂä†ÔºàÁÑ°Èôê„É´„Éº„ÉóÈò≤Ê≠¢Ôºâ
  useEffect(() => {
    let isRefreshing = false; // ÂÜçÂèñÂæó‰∏≠„Éï„É©„Ç∞

    const handleDataRefresh = (event: any) => {
      if (isRefreshing) return; // ÂÜçÂèñÂæó‰∏≠„ÅØÁÑ°Ë¶ñ

      const { data, flowId } = event.detail;
      console.log('üîÑ flowDataRefreshed„Ç§„Éô„É≥„ÉàÂèó‰ø°:', { flowId, dataId: data?.id });

      if (data && editedFlow && data.id === editedFlow.id) {
        console.log('‚úÖ Á∑®ÈõÜ‰∏≠„Éï„É≠„Éº„ÅÆ„Éá„Éº„Çø„ÇíÊõ¥Êñ∞');
        setEditedFlow({ ...data });
      }
    };

    // Âº∑Âà∂ÁöÑ„Å™„Éá„Éº„ÇøÂÜçÂèñÂæóÂá¶ÁêÜÔºàÈò≤Âæ°ÁöÑ„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞Ôºâ
    const handleForceRefresh = async (event: any) => {
      if (isRefreshing) {
        console.log('‚ö†Ô∏è Êó¢„Å´ÂÜçÂèñÂæó‰∏≠„ÅÆ„Åü„ÇÅ„ÄÅ„É™„ÇØ„Ç®„Çπ„Éà„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åô');
        return;
      }

      const { flowId } = event.detail;
      console.log('üîÑ Âº∑Âà∂„Éá„Éº„ÇøÂÜçÂèñÂæóË¶ÅÊ±Ç:', flowId);

      if (editedFlow && (flowId === editedFlow.id || !flowId)) {
        isRefreshing = true; // ÂÜçÂèñÂæóÈñãÂßã
        console.log('üíæ ‰øùÂ≠òÂæå„ÅÆ„Éá„Éº„Çø„ÇíÂÜçÂèñÂæó„Åó„Åæ„Åô...');

        try {
          // „Çø„Ç§„É†„Ç¢„Ç¶„Éà‰ªò„Åç„Åß„É™„ÇØ„Ç®„Çπ„ÉàÂÆüË°å
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), 10000); // 10Áßí„Çø„Ç§„É†„Ç¢„Ç¶„Éà

          const timestamp = Date.now();
          const response = await fetch(`/api/emergency-flow/get/${editedFlow.id}?ts=${timestamp}&_force=true`, {
            method: 'GET',
            headers: {
              'Cache-Control': 'no-cache, no-store, must-revalidate',
              'Pragma': 'no-cache'
            },
            signal: controller.signal
          });

          clearTimeout(timeoutId);

          if (response.ok) {
            const result = await response.json();
            const freshData = result.data || result;

            console.log('üîÑ ÂÜçÂèñÂæó„Åó„Åü„Éá„Éº„Çø:', {
              id: freshData.id,
              title: freshData.title,
              stepsCount: freshData.steps?.length || 0,
              updatedAt: freshData.updatedAt
            });

            // „Éá„Éº„Çø„ÅÆÊï¥ÂêàÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
            if (freshData.id === editedFlow.id) {
              setEditedFlow({ ...freshData });
              console.log('‚úÖ „Ç®„Éá„Ç£„Çø„Éº„ÅÆ„Éá„Éº„Çø„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü');
            }
          } else {
            console.error('‚ùå „Éá„Éº„ÇøÂÜçÂèñÂæó„Å´Â§±Êïó:', response.status);
          }
        } catch (error) {
          if (error.name === 'AbortError') {
            console.warn('‚ö†Ô∏è „Éá„Éº„ÇøÂÜçÂèñÂæó„Åå„Çø„Ç§„É†„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„Åü');
          } else {
            console.error('‚ùå „Éá„Éº„ÇøÂÜçÂèñÂæó„Ç®„É©„Éº:', error);
          }
        } finally {
          isRefreshing = false; // ÂÜçÂèñÂæóÁµÇ‰∫Ü
        }
      }
    };

    window.addEventListener('flowDataRefreshed', handleDataRefresh);
    window.addEventListener('forceRefreshFlowData', handleForceRefresh);

    return () => {
      window.removeEventListener('flowDataRefreshed', handleDataRefresh);
      window.removeEventListener('forceRefreshFlowData', handleForceRefresh);
      isRefreshing = false; // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
    };
  }, [editedFlow?.id]); // editedFlow.id„ÅÆ„Åø„Å´‰æùÂ≠ò

  // ‰øùÂ≠òÂá¶ÁêÜ„ÅÆÊîπÂñÑ
  const handleSave = useCallback(async () => {
    if (!editedFlow) return;

    setIsSaving(true);
    try {
      // ‰øùÂ≠ò„Éá„Éº„Çø„ÅÆÊ§úË®º
      if (!editedFlow.title.trim()) {
        throw new Error('„Çø„Ç§„Éà„É´„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
      }

      if (editedFlow.steps.length === 0) {
        throw new Error('Â∞ë„Å™„Åè„Å®„ÇÇ1„Å§„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó„ÅåÂøÖË¶Å„Åß„Åô');
      }

      // Â∑ÆÂàÜ„Éû„Éº„Ç∏Âá¶ÁêÜ„ÇíÂÆüË£Ö
    const mergeSteps = (editedSteps: FlowStep[], originalSteps: FlowStep[]) => {
      return editedSteps.map(editedStep => {
        // ÂÖÉ„Éá„Éº„Çø„Åã„ÇâÂêå„ÅòID„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó„ÇíË¶ã„Å§„Åë„Çã
        const originalStep = originalSteps.find(orig => orig.id === editedStep.id);

        if (!originalStep) {
          // Êñ∞Ë¶èËøΩÂä†„Åï„Çå„Åü„Çπ„ÉÜ„ÉÉ„Éó„ÅØ„Åù„ÅÆ„Åæ„ÅæËøî„Åô
          console.log(`üÜï Êñ∞Ë¶è„Çπ„ÉÜ„ÉÉ„Éó: ${editedStep.id}`);
          return editedStep;
        }

        // „Éû„Éº„Ç∏Âá¶ÁêÜ: ÂÖÉ„Éá„Éº„Çø„Çí„Éô„Éº„Çπ„Å´Á∑®ÈõÜ„Éá„Éº„Çø„Çí‰∏äÊõ∏„Åç
        const mergedStep = {
          ...originalStep,
          ...editedStep,
          // Êù°‰ª∂ÂàÜÂ≤ê„Éé„Éº„ÉâÔºàtype: "condition"Ôºâ„ÅÆÂ†¥Âêà„ÄÅconditions „Éó„É≠„Éë„ÉÜ„Ç£„Çí‰øùÊåÅ
          ...(originalStep.type === "condition" && !editedStep.conditions
            ? { conditions: originalStep.conditions }
            : {}),
          // Êóß„Çπ„Ç≠„Éº„Éû„ÅÆ„Éï„Ç£„Éº„É´„Éâ„ÇÇ‰øùÊåÅ
          ...(originalStep.yesCondition && !editedStep.yesCondition
            ? { yesCondition: originalStep.yesCondition }
            : {}),
          ...(originalStep.noCondition && !editedStep.noCondition
            ? { noCondition: originalStep.noCondition }
            : {}),
          ...(originalStep.otherCondition && !editedStep.otherCondition
            ? { otherCondition: originalStep.otherCondition }
            : {}),
          ...(originalStep.yesNextStepId && !editedStep.yesNextStepId
            ? { yesNextStepId: originalStep.yesNextStepId }
            : {}),
          ...(originalStep.noNextStepId && !editedStep.noNextStepId
            ? { noNextStepId: originalStep.noNextStepId }
            : {}),
          ...(originalStep.otherNextStepId && !editedStep.otherNextStepId
            ? { otherNextStepId: originalStep.otherNextStepId }
            : {})
        };

        console.log(`üîÑ „Éû„Éº„Ç∏Âá¶ÁêÜ: ${editedStep.id}`, {
          originalType: originalStep.type,
          editedType: editedStep.type,
          hasOriginalConditions: !!originalStep.conditions,
          hasEditedConditions: !!editedStep.conditions,
          preservedConditions: !!mergedStep.conditions
        });

        return mergedStep;
      });
    };

    // ÂÖÉ„Éá„Éº„Çø„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„Éû„Éº„Ç∏Âá¶ÁêÜ„ÇíÂÆüË°å
    const stepsToProcess = originalFlow 
      ? mergeSteps(editedFlow.steps, originalFlow.steps)
      : editedFlow.steps;

    console.log('üîÄ „Éû„Éº„Ç∏Âá¶ÁêÜÁµêÊûú:', {
      originalStepsCount: originalFlow?.steps?.length || 0,
      editedStepsCount: editedFlow.steps.length,
      mergedStepsCount: stepsToProcess.length,
      hasOriginalData: !!originalFlow
    });

    // Áµ±‰∏Ä„Çπ„Ç≠„Éº„Éû„Å´„Çà„Çã‰øùÂ≠ò„Éá„Éº„Çø„ÇíÊ∫ñÂÇô
    const saveData = {
      ...editedFlow,
      steps: stepsToProcess.map(step => {
          // üîÄ Êù°‰ª∂ÂàÜÂ≤ê„Éé„Éº„ÉâÔºöÁµ±‰∏Ä„Çπ„Ç≠„Éº„Éû„ÅßÂÆåÂÖ®‰øùÂ≠ò
          if (step.type === 'decision') {
            console.log(`üîÄ Êù°‰ª∂ÂàÜÂ≤ê„Éé„Éº„Éâ ${step.id} Áµ±‰∏Ä„Çπ„Ç≠„Éº„Éû‰øùÂ≠ò:`, {
              stepId: step.id,
              stepType: step.type,
              title: step.title,
              optionsCount: step.options?.length || 0,
              optionsDetail: step.options
            });

            // Êù°‰ª∂È†ÖÁõÆ„ÅÆÂÆåÂÖ®‰øùÂ≠òÔºàÁµ±‰∏Ä„Çπ„Ç≠„Éº„ÉûÔºâ- „Çà„ÇäÂé≥ÂØÜ„Å™Ê§úË®º
            const processedOptions = (step.options || []).map((option, index) => {
              const processedOption = {
                text: option.text || `Êù°‰ª∂È†ÖÁõÆ ${index + 1}`,
                nextStepId: option.nextStepId || '',
                condition: option.condition || option.text || '',
                isTerminal: Boolean(option.isTerminal),
                conditionType: option.conditionType || 'other'
              };

              console.log(`üîß Êù°‰ª∂È†ÖÁõÆ ${index + 1} Âá¶ÁêÜ:`, {
                original: option,
                processed: processedOption
              });

              return processedOption;
            });

            // „Éá„Éï„Ç©„É´„ÉàÊù°‰ª∂È†ÖÁõÆ„ÅåÁ©∫„ÅÆÂ†¥Âêà„ÅØÂü∫Êú¨ÁöÑ„Å™Êù°‰ª∂„ÇíËøΩÂä†
            const unifiedOptions = processedOptions.length > 0 ? processedOptions : [
              { text: '„ÅØ„ÅÑ', nextStepId: '', condition: '„ÅØ„ÅÑ', isTerminal: false, conditionType: 'yes' },
              { text: '„ÅÑ„ÅÑ„Åà', nextStepId: '', condition: '„ÅÑ„ÅÑ„Åà', isTerminal: false, conditionType: 'no' }
            ];

            // ÊóßÂΩ¢Âºè„ÅÆÊù°‰ª∂„Éï„Ç£„Éº„É´„Éâ„ÇÇÁîüÊàêÔºàÂæåÊñπ‰∫íÊèõÊÄßÔºâ
            const yesOption = unifiedOptions.find(opt => opt.conditionType === 'yes');
            const noOption = unifiedOptions.find(opt => opt.conditionType === 'no');
            const otherOptions = unifiedOptions.filter(opt => opt.conditionType === 'other');

            const savedDecisionStep = {
              ...step,
              id: step.id,
              title: step.title || 'Êñ∞„Åó„ÅÑÊù°‰ª∂ÂàÜÂ≤ê',
              description: step.description || step.message || '',
              message: step.message || step.description || '',
              imageUrl: step.imageUrl || '',
              type: 'decision',
              // Áµ±‰∏Ä„Çπ„Ç≠„Éº„ÉûÔºöoptionsÈÖçÂàóÔºàÂøÖÈ†àÔºâ
              options: unifiedOptions,
              // ÂæåÊñπ‰∫íÊèõÊÄßÔºöÂÄãÂà•Êù°‰ª∂„Éï„Ç£„Éº„É´„Éâ
              yesCondition: yesOption?.condition || yesOption?.text || '',
              yesNextStepId: yesOption?.nextStepId || '',
              noCondition: noOption?.condition || noOption?.text || '',
              noNextStepId: noOption?.nextStepId || '',
              otherCondition: otherOptions.map(opt => opt.condition || opt.text).join(', ') || '',
              otherNextStepId: otherOptions[0]?.nextStepId || ''
            };

            console.log(`‚úÖ Êù°‰ª∂ÂàÜÂ≤ê„Éé„Éº„Éâ ${step.id} Áµ±‰∏Ä„Çπ„Ç≠„Éº„Éû‰øùÂ≠òÂÆå‰∫Ü:`, {
              stepId: savedDecisionStep.id,
              type: savedDecisionStep.type,
              optionsCount: savedDecisionStep.options.length,
              optionsDetail: savedDecisionStep.options,
              yesCondition: savedDecisionStep.yesCondition,
              noCondition: savedDecisionStep.noCondition,
              otherCondition: savedDecisionStep.otherCondition
            });

            return savedDecisionStep;
          } else {
            // ÈÄöÂ∏∏„ÅÆ„Çπ„ÉÜ„ÉÉ„ÉóÔºö„Éá„Éï„Ç©„É´„Éà„Åß"Ê¨°„Å∏"„Ç™„Éó„Ç∑„Éß„É≥„ÇíÁ¢∫‰øù
            const defaultOptions = step.options?.length > 0 ? step.options : [{
              text: 'Ê¨°„Å∏',
              nextStepId: '',
              isTerminal: false,
              conditionType: 'other',
              condition: ''
            }];

            return {
              ...step,
              description: step.description || step.message || '',
              message: step.message || step.description || '',
              imageUrl: step.imageUrl || '',
              options: defaultOptions.map(option => ({
                text: option.text || 'Ê¨°„Å∏',
                nextStepId: option.nextStepId || '',
                condition: option.condition || '',
                isTerminal: Boolean(option.isTerminal),
                conditionType: option.conditionType || 'other'
              }))
            };
          }
        }),
        // slides„Éï„Ç£„Éº„É´„Éâ„ÇÇÁµ±‰∏Ä„Çπ„Ç≠„Éº„Éû„ÅßÂêåÊúüÔºàsteps„Å®ÂÆåÂÖ®ÂêåÊúüÔºâ
        slides: saveData.steps.map(step => ({ ...step })),
        updatedAt: new Date().toISOString(),
        savedTimestamp: Date.now()
      };

      // üéØ ‰øùÂ≠òÊôÇ„Å´„Éï„Ç°„Ç§„É´„Éë„Çπ„ÇíÊòéÁ§∫ÁöÑ„Å´ÊåáÂÆö
      const requestBody = {
        ...saveData,
        filePath: selectedFilePath || `knowledge-base/troubleshooting/${editedFlow.id}.json`
      };

      console.log('üíæ ‰øùÂ≠ò„É™„ÇØ„Ç®„Çπ„Éà:', {
        id: saveData.id,
        title: saveData.title,
        filePath: requestBody.filePath,
        stepsCount: saveData.steps?.length || 0
      });

      const response = await fetch(`/api/emergency-flow/save`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Cache-Control': 'no-cache, no-store, must-revalidate'
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.error || `‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü (${response.status})`);
      }

      const result = await response.json();

      if (result.success) {
      console.log(`‚úÖ ‰øùÂ≠òÊàêÂäü:`, result);

      // üîÄ Êù°‰ª∂ÂàÜÂ≤ê„Éé„Éº„Éâ„ÅÆ‰øùÂ≠òÁ¢∫Ë™ç
      const decisionSteps = saveData.steps.filter(step => step.type === 'decision');
      console.log(`üîÄ ‰øùÂ≠ò„Åï„Çå„ÅüÊù°‰ª∂ÂàÜÂ≤ê„Éé„Éº„Éâ:`, {
        decisionCount: decisionSteps.length,
        decisionDetails: decisionSteps.map(step => ({
          id: step.id,
          title: step.title,
          optionsCount: step.options?.length || 0,
          options: step.options
        }))
      });

      // üßπ ‰øùÂ≠òÂæå„Å´„Ç≠„É£„ÉÉ„Ç∑„É•„ÇíÂº∑Âà∂„ÇØ„É™„Ç¢
      if ('caches' in window) {
        try {
          const cacheNames = await caches.keys();
          await Promise.all(cacheNames.map(name => caches.delete(name)));
          console.log('üßπ ‰øùÂ≠òÂæå„Ç≠„É£„ÉÉ„Ç∑„É•„ÇØ„É™„Ç¢ÂÆå‰∫Ü');
        } catch (cacheError) {
          console.warn('‚ö†Ô∏è „Ç≠„É£„ÉÉ„Ç∑„É•„ÇØ„É™„Ç¢„Ç®„É©„Éº:', cacheError);
        }
      }

      toast({
        title: "‰øùÂ≠òÂÆå‰∫Ü",
        description: `„Éï„É≠„Éº„Äå${editedFlow.title}„Äç„Åå‰øùÂ≠ò„Åï„Çå„Åæ„Åó„Åü (${saveData.steps?.length || 0}„Çπ„ÉÜ„ÉÉ„Éó)`,
      });

      // ‰øùÂ≠ò„Åï„Çå„Åü„Éá„Éº„Çø„Åß„É≠„Éº„Ç´„É´Áä∂ÊÖã„ÇíÊõ¥Êñ∞
      if (onSave) {
        onSave(saveData);
      }

      // ‰ªñ„ÅÆ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Å´‰øùÂ≠òÂÆå‰∫Ü„ÇíÈÄöÁü•
      if (typeof window !== 'undefined') {
        window.dispatchEvent(new CustomEvent('flowSaved', { 
          detail: { 
            savedData: saveData, 
            filePath: selectedFilePath,
            timestamp: Date.now(),
            stepsCount: saveData.steps?.length || 0
          }
        }));

        // „Éï„É≠„Éº‰∏ÄË¶ß„ÅÆÂº∑Âà∂Êõ¥Êñ∞„ÇíË¶ÅÊ±Ç
        window.dispatchEvent(new CustomEvent('forceRefreshFlowList'));
      }

      // Á∑®ÈõÜÁä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
      setEditingStepId(null);
      setEditingTitle(false);
      setEditingStepTitle(null);
    }

      // ‰øùÂ≠ò„Åï„Çå„Åü„Éá„Éº„Çø„ÅßÁèæÂú®„ÅÆÁ∑®ÈõÜ„Éá„Éº„Çø„ÇíÊõ¥Êñ∞
      setEditedFlow(saveData);

      // ‰øùÂ≠òÊàêÂäüÂæå„ÅØÂº∑Âà∂ÁöÑ„Å´„Ç®„Éá„Ç£„Çø„Éº„Éá„Éº„Çø„ÇíÊõ¥Êñ∞
      console.log('üíæ ‰øùÂ≠òÊàêÂäü - „Ç®„Éá„Ç£„Çø„Éº„Éá„Éº„Çø„ÇíÁõ¥Êé•Êõ¥Êñ∞');
      setEditedFlow({ ...saveData });

      // üîÑ ÂÆåÂÖ®„Å™„Éï„Ç°„Ç§„É´Ê§úË®º„ÇíÂÆüË°å
      try {
        const verifyResponse = await fetch(`/api/emergency-flow-router/get/${editedFlow.id}?ts=${Date.now()}&verify=true`, {
          method: 'GET',
          headers: {
            'Cache-Control': 'no-cache, no-store, must-revalidate',
            'Pragma': 'no-cache'
          }
        });

        if (verifyResponse.ok) {
          const verifyData = await verifyResponse.json();
          console.log('üîç ‰øùÂ≠òÂæåÊ§úË®º„Éá„Éº„Çø:', {
            id: verifyData.id,
            stepsCount: verifyData.steps?.length || 0,
            updatedAt: verifyData.updatedAt
          });

          // Ê§úË®º„Éá„Éº„Çø„Å®‰øùÂ≠ò„Éá„Éº„Çø„Åå‰∏ÄËá¥„Åô„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
          const stepsMatch = (verifyData.steps?.length || 0) === (saveData.steps?.length || 0);
          console.log(`üìä „Éá„Éº„ÇøÊï¥ÂêàÊÄß„ÉÅ„Çß„ÉÉ„ÇØ: ${stepsMatch ? '‰∏ÄËá¥' : '‰∏ç‰∏ÄËá¥'}`);

          if (!stepsMatch) {
            console.warn('‚ö†Ô∏è ‰øùÂ≠ò„Éá„Éº„Çø„Å®Ê§úË®º„Éá„Éº„Çø„Åå‰∏ç‰∏ÄËá¥ - ÂÜç‰øùÂ≠ò„ÇíË©¶Ë°å');
            // ÂÜç‰øùÂ≠ò„ÇíË©¶Ë°å
            const retryResponse = await fetch(`/api/emergency-flow-router/save/${editedFlow.id}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Cache-Control': 'no-cache'
              },
              body: JSON.stringify(saveData)
            });

            if (retryResponse.ok) {
              console.log('‚úÖ ÂÜç‰øùÂ≠òÂÆå‰∫Ü');
            }
          }
        }
      } catch (verifyError) {
        console.warn('‚ö†Ô∏è ‰øùÂ≠òÂæåÊ§úË®º„Ç®„É©„Éº:', verifyError);
      }

      // üßπ „Éñ„É©„Ç¶„Ç∂„Ç≠„É£„ÉÉ„Ç∑„É•„ÇíÂÆåÂÖ®„ÇØ„É™„Ç¢
      if ('caches' in window) {
        try {
          const cacheNames = await caches.keys();
          await Promise.all(cacheNames.map(name => caches.delete(name)));
          console.log('üßπ „Éñ„É©„Ç¶„Ç∂„Ç≠„É£„ÉÉ„Ç∑„É•ÂÆåÂÖ®„ÇØ„É™„Ç¢ÂÆå‰∫Ü');
        } catch (cacheError) {
          console.warn('‚ö†Ô∏è „Ç≠„É£„ÉÉ„Ç∑„É•„ÇØ„É™„Ç¢„Ç®„É©„Éº:', cacheError);
        }
      }

      // „Éá„Éº„ÇøÊõ¥Êñ∞„Ç§„Éô„É≥„Éà„ÇíÁô∫Ë°åÔºàÈáçË§áÈò≤Ê≠¢„ÅßÁ¢∫ÂÆü„Å´ÂèçÊò†Ôºâ
      setTimeout(() => {
        // „Ç§„Éô„É≥„ÉàÁô∫Ë°å„ÅÆÈáçË§á„ÇíÈò≤„Åê
        const eventDetail = { 
          flowId: editedFlow.id, 
          data: saveData,
          timestamp: Date.now(),
          forceRefresh: true,
          source: 'emergency-flow-editor'
        };

        window.dispatchEvent(new CustomEvent('flowDataUpdated', { detail: eventDetail }));

        // „Éï„É≠„Éº‰∏ÄË¶ß„ÅÆÊõ¥Êñ∞„ÅØ1Âõû„Å†„ÅëÂÆüË°å
        window.dispatchEvent(new CustomEvent('forceRefreshFlowList', {
          detail: { 
            forceRefresh: true,
            timestamp: Date.now(),
            updatedFlowId: editedFlow.id,
            preventLoop: true
          }
        }));

        console.log('üîÑ ‰øùÂ≠òÂæå„Ç§„Éô„É≥„ÉàÁô∫Ë°åÂÆå‰∫ÜÔºàÈáçË§áÈò≤Ê≠¢Ôºâ');
      }, 500);



    } catch (error) {
      console.error('‚ùå ‰øùÂ≠ò„Ç®„É©„Éº:', error);
      toast({
        title: "‰øùÂ≠ò„Ç®„É©„Éº",
        description: error instanceof Error ? error.message : "„Éï„É≠„Éº„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü",
        variant: "destructive"
      });
    } finally {
      setIsSaving(false);
    }
  }, [editedFlow, onSave, toast, selectedFilePath, originalFlow]);

  // „Çø„Ç§„Éà„É´Êõ¥Êñ∞
  const updateTitle = (newTitle: string) => {
    if (editedFlow) {
      setEditedFlow({
        ...editedFlow,
        title: newTitle
      });
    }
  };

  // Ë™¨ÊòéÊõ¥Êñ∞
  const updateDescription = (newDescription: string) => {
    if (editedFlow) {
      setEditedFlow({
        ...editedFlow,
        description: newDescription
      });
    }
  };

  // „Çπ„ÉÜ„ÉÉ„ÉóÊõ¥Êñ∞
  const updateStep = (stepId: string, updates: Partial<FlowStep>) => {
    if (!editedFlow) return;

    setEditedFlow({
      ...editedFlow,
      steps: editedFlow.steps.map(step =>
        step.id === stepId ? { ...step, ...updates } : step
      )
    });
  };

  // „Çπ„ÉÜ„ÉÉ„Éó„Çø„Ç§„Éà„É´Êõ¥Êñ∞
  const updateStepTitle = (stepId: string, newTitle: string) => {
    updateStep(stepId, { title: newTitle });
  };

  // Êñ∞„Åó„ÅÑ„Çπ„ÉÜ„ÉÉ„ÉóËøΩÂä†
  const addStep = (type: FlowStep['type']) => {
    if (!editedFlow) return;

    const newStepId = `step_${Date.now()}`;
    const newStep: FlowStep = {
      id: newStepId,
      title: type === 'decision' ? 'Êñ∞„Åó„ÅÑÊù°‰ª∂ÂàÜÂ≤ê' : 'Êñ∞„Åó„ÅÑ„Çπ„ÉÜ„ÉÉ„Éó',
      description: '',
      message: '',
      type,
      options: type === 'decision' ? [
        { 
          text: '„ÅØ„ÅÑ', 
          nextStepId: '', 
          isTerminal: false, 
          conditionType: 'yes',
          condition: ''
        },
        { 
          text: '„ÅÑ„ÅÑ„Åà', 
          nextStepId: '', 
          isTerminal: false, 
          conditionType: 'no',
          condition: ''
        }
      ] : [
        { 
          text: 'Ê¨°„Å∏', 
          nextStepId: '', 
          isTerminal: false, 
          conditionType: 'other',
          condition: ''
        }
      ]
    };

    setEditedFlow({
      ...editedFlow,
      steps: [...editedFlow.steps, newStep]
    });
  };

  // „Çπ„ÉÜ„ÉÉ„ÉóÂâäÈô§
  const deleteStep = (stepId: string) => {
    if (!editedFlow) return;

    setEditedFlow({
      ...editedFlow,
      steps: editedFlow.steps.filter(step => step.id !== stepId)
    });

    setShowDeleteDialog(false);
    setStepToDelete(null);
  };

  // „Ç™„Éó„Ç∑„Éß„É≥Êõ¥Êñ∞ÔºàÊù°‰ª∂ÂàÜÂ≤êÂØæÂøúÔºâ
  const updateOption = (stepId: string, optionIndex: number, updates: Partial<FlowStep['options'][0]>) => {
    if (!editedFlow) return;

    setEditedFlow({
      ...editedFlow,
      steps: editedFlow.steps.map(step =>
        step.id === stepId ? {
          ...step,
          options: step.options.map((option, index) =>
            index === optionIndex ? { ...option, ...updates } : option
          )
        } : step
      )
    });
  };

  // „Ç™„Éó„Ç∑„Éß„É≥ËøΩÂä†
  const addOption = (stepId: string) => {
    if (!editedFlow) return;

    const step = editedFlow.steps.find(s => s.id === stepId);
    if (!step) return;

    const newOption = {
      text: step.type === 'decision' ? 'Êñ∞„Åó„ÅÑÊù°‰ª∂' : 'Êñ∞„Åó„ÅÑÈÅ∏ÊäûËÇ¢',
      nextStepId: '',
      isTerminal: false,
      conditionType: step.type === 'decision' ? 'other' as const : 'other' as const,
      condition: ''
    };

    updateStep(stepId, {
      options: [...step.options, newOption]
    });
  };

  // Êù°‰ª∂ÂàÜÂ≤êÂ∞ÇÁî®„ÅÆÈÅ∏ÊäûËÇ¢ËøΩÂä†
  const addDecisionOption = (stepId: string) => {
    if (!editedFlow) return;

    const step = editedFlow.steps.find(s => s.id === stepId);
    if (!step || step.type !== 'decision') return;

    // ÊúÄÂ§ß5„Å§„Åæ„Åß„ÅÆÂà∂Èôê
    if (step.options.length >= 5) {
      toast({
        title: "ËøΩÂä†„Åß„Åç„Åæ„Åõ„Çì",
        description: "Êù°‰ª∂ÂàÜÂ≤ê„Åß„ÅØÊúÄÂ§ß5„Å§„Åæ„Åß„ÅÆÈÅ∏ÊäûËÇ¢„ÅåË®≠ÂÆö„Åß„Åç„Åæ„Åô",
        variant: "destructive"
      });
      return;
    }

    // Êó¢Â≠ò„ÅÆÊù°‰ª∂„Çø„Ç§„Éó„ÇíÁ¢∫Ë™ç
    const existingTypes = step.options.map(opt => opt.conditionType);
    let newConditionType: 'yes' | 'no' | 'other' = 'other';
    let newText = 'Êñ∞„Åó„ÅÑÊù°‰ª∂';

    // „Åæ„Å†Â≠òÂú®„Åó„Å™„ÅÑÊù°‰ª∂„Çø„Ç§„Éó„ÇíÂÑ™ÂÖàÁöÑ„Å´ËøΩÂä†
    if (!existingTypes.includes('yes')) {
      newConditionType = 'yes';
      newText = '„ÅØ„ÅÑ';
    } else if (!existingTypes.includes('no')) {
      newConditionType = 'no';
      newText = '„ÅÑ„ÅÑ„Åà';
    } else {
      // "„Åù„ÅÆ‰ªñ"„Çø„Ç§„Éó„ÇíÈÄ£Áï™„ÅßËøΩÂä†
      const otherCount = existingTypes.filter(type => type === 'other').length;
      newConditionType = 'other';
      newText = `„Åù„ÅÆ‰ªñ„ÅÆÁä∂Ê≥Å${otherCount > 0 ? ` ${otherCount + 1}` : ''}`;
    }

    const newOption = {
      text: newText,
      nextStepId: '',
      isTerminal: false,
      conditionType: newConditionType,
      condition: ''
    };

    updateStep(stepId, {
      options: [...step.options, newOption]
    });

    toast({
      title: "Êù°‰ª∂È†ÖÁõÆ„ÇíËøΩÂä†„Åó„Åæ„Åó„Åü",
      description: `Êñ∞„Åó„ÅÑÊù°‰ª∂„Äå${newText}„Äç„ÇíËøΩÂä†„Åó„Åæ„Åó„Åü„ÄÇÁ∑®ÈõÜ„Åó„Å¶Ë©≥Á¥∞„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`
    });
  };

  // Êù°‰ª∂ÂàÜÂ≤ê„ÅÆÊù°‰ª∂„Çø„Ç§„Éó„ÇíÂ§âÊõ¥
  const changeConditionType = (stepId: string, optionIndex: number, newType: 'yes' | 'no' | 'other') => {
    if (!editedFlow) return;

    const step = editedFlow.steps.find(s => s.id === stepId);
    if (!step || step.type !== 'decision') return;

    // ‰ªñ„ÅÆ„Ç™„Éó„Ç∑„Éß„É≥„ÅßÂêå„ÅòÊù°‰ª∂„Çø„Ç§„Éó„Åå‰Ωø„Çè„Çå„Å¶„ÅÑ„Å™„ÅÑ„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    const existingTypes = step.options.map((opt, idx) => idx !== optionIndex ? opt.conditionType : null);
    if (existingTypes.includes(newType)) {
      toast({
        title: "Ë≠¶Âëä",
        description: "„Åì„ÅÆÊù°‰ª∂„Çø„Ç§„Éó„ÅØÊó¢„Å´‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Åæ„Åô",
        variant: "destructive"
      });
      return;
    }

    // „Éá„Éï„Ç©„É´„Éà„ÉÜ„Ç≠„Çπ„Éà„ÇíË®≠ÂÆö
    let defaultText = '';
    switch (newType) {
      case 'yes':
        defaultText = '„ÅØ„ÅÑ';
        break;
      case 'no':
        defaultText = '„ÅÑ„ÅÑ„Åà';
        break;
      case 'other':
        defaultText = '„Åù„ÅÆ‰ªñ„ÅÆÁä∂Ê≥Å';
        break;
    }

    updateOption(stepId, optionIndex, { 
      conditionType: newType,
      text: defaultText
    });
  };

  // „Ç™„Éó„Ç∑„Éß„É≥ÂâäÈô§
  const removeOption = (stepId: string, optionIndex: number) => {
    if (!editedFlow) return;

    const step = editedFlow.steps.find(s => s.id === stepId);
    if (!step) return;

    // Êù°‰ª∂ÂàÜÂ≤ê„ÅÆÂ†¥Âêà„ÅØÊúÄ‰Ωé2„Å§„ÅÆÈÅ∏ÊäûËÇ¢„ÅåÂøÖË¶Å
    if (step.type === 'decision' && step.options.length <= 2) {
      toast({
        title: "ÂâäÈô§„Åß„Åç„Åæ„Åõ„Çì",
        description: "Êù°‰ª∂ÂàÜÂ≤ê„Åß„ÅØÊúÄ‰Ωé2„Å§„ÅÆÈÅ∏ÊäûËÇ¢„ÅåÂøÖË¶Å„Åß„Åô",
        variant: "destructive"
      });
      return;
    }

    // ÈÄöÂ∏∏„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó„ÅÆÂ†¥Âêà„ÅØÊúÄ‰Ωé1„Å§„ÅÆÈÅ∏ÊäûËÇ¢„ÅåÂøÖË¶Å
    if (step.type !== 'decision' && step.options.length <= 1) {
      toast({
        title: "ÂâäÈô§„Åß„Åç„Åæ„Åõ„Çì",
        description: "ÊúÄ‰Ωé1„Å§„ÅÆÈÅ∏ÊäûËÇ¢„ÅåÂøÖË¶Å„Åß„Åô",
        variant: "destructive"
      });
      return;
    }

    updateStep(stepId, {
      options: step.options.filter((_, index) => index !== optionIndex)
    });

    toast({
      title: "ÈÅ∏ÊäûËÇ¢„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü",
      description: `ÈÅ∏ÊäûËÇ¢ ${optionIndex + 1} „ÇíÂâäÈô§„Åó„Åæ„Åó„Åü`
    });
  };

  // „Ç≠„Éº„ÉØ„Éº„ÉâÊõ¥Êñ∞
  const updateKeywords = (keywords: string) => {
    if (!editedFlow) return;

    const keywordArray = keywords.split(',').map(k => k.trim()).filter(k => k);
    setEditedFlow({
      ...editedFlow,
      triggerKeywords: keywordArray
    });
  };

  if (!editedFlow) {
    return (
      <div className="flex items-center justify-center h-64">
        <p className="text-gray-500">Ë™≠„ÅøËæº„Åø‰∏≠...</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* „Éò„ÉÉ„ÉÄ„Éº */}
      <div className="flex items-center justify-between">
        <div className="flex-1">
          {editingTitle ? (
            <div className="flex items-center gap-2">
              <Input
                value={editedFlow.title}
                onChange={(e) => updateTitle(e.target.value)}
                className="text-xl font-bold"
                placeholder="„Éï„É≠„Éº„Çø„Ç§„Éà„É´„ÇíÂÖ•Âäõ"
              />
              <Button size="sm" onClick={() => setEditingTitle(false)}>
                <Check className="w-4 h-4" />
              </Button>
              <Button size="sm" variant="outline" onClick={() => setEditingTitle(false)}>
                <X className="w-4 h-4" />
              </Button>
            </div>
          ) : (
            <div className="flex items-center gap-2">
              <h2 className="text-xl font-bold">{editedFlow.title}</h2>
              <Button size="sm" variant="ghost" onClick={() => setEditingTitle(true)}>
                <Edit className="w-4 h-4" />
              </Button>
            </div>
          )}
        </div>
        <Button onClick={handleSave} disabled={isSaving}>
          <Save className="w-4 h-4 mr-2" />
          {isSaving ? '‰øùÂ≠ò‰∏≠...' : '‰øùÂ≠ò'}
        </Button>
      </div>

      {/* Ë™¨Êòé */}
      <div>
        <Label>Ë™¨Êòé</Label>
        <Textarea
          value={editedFlow.description}
          onChange={(e) => updateDescription(e.target.value)}
          placeholder="„Éï„É≠„Éº„ÅÆË™¨Êòé„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
        />
      </div>

      {/* „Éà„É™„Ç¨„Éº„Ç≠„Éº„ÉØ„Éº„Éâ */}
      <div>
        <Label>„Éà„É™„Ç¨„Éº„Ç≠„Éº„ÉØ„Éº„ÉâÔºà„Ç´„É≥„ÉûÂå∫Âàá„ÇäÔºâ</Label>
        <Input
          value={editedFlow.triggerKeywords.join(', ')}
          onChange={(e) => updateKeywords(e.target.value)}
          placeholder="„Ç®„É≥„Ç∏„É≥ÂÅúÊ≠¢, ÂÜçÂßãÂãï‰∏çÂèØ"
        />
      </div>

      {/* „Çπ„ÉÜ„ÉÉ„ÉóËøΩÂä†„Éú„Çø„É≥ */}
      <div className="flex gap-2">
        <Button variant="outline" onClick={() => addStep('step')}>
          <Plus className="w-4 h-4 mr-2" />
          „Çπ„ÉÜ„ÉÉ„ÉóËøΩÂä†
        </Button>
        <Button variant="outline" onClick={() => addStep('decision')}>
          <GitBranch className="w-4 h-4 mr-2" />
          Êù°‰ª∂ÂàÜÂ≤êËøΩÂä†
        </Button>
      </div>

      {/* „Çπ„ÉÜ„ÉÉ„Éó‰∏ÄË¶ß */}
      <div className="space-y-4">
        {editedFlow.steps.map((step, index) => (
          <Card key={step.id} className="relative">
            <CardHeader className="pb-2">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <Badge variant={step.type === 'decision' ? 'secondary' : 'default'}>
                    {step.type === 'start' && 'ÈñãÂßã'}
                    {step.type === 'step' && '„Çπ„ÉÜ„ÉÉ„Éó'}
                    {step.type === 'decision' && 'Êù°‰ª∂ÂàÜÂ≤ê'}
                    {step.type === 'end' && 'ÁµÇ‰∫Ü'}
                  </Badge>
                  <span className="text-sm text-gray-500">#{index + 1}</span>
                </div>
                <Button
                  size="sm"
                  variant="ghost"
                  onClick={() => {
                    setStepToDelete(step.id);
                    setShowDeleteDialog(true);
                  }}
                >
                  <Trash2 className="w-4 h-4" />
                </Button>
              </div>

              {/* „Çπ„ÉÜ„ÉÉ„Éó„Çø„Ç§„Éà„É´Á∑®ÈõÜ */}
              <div>
                <Label>„Çø„Ç§„Éà„É´</Label>
                <Input
                  value={step.title}
                  onChange={(e) => updateStepTitle(step.id, e.target.value)}
                  placeholder="„Çπ„ÉÜ„ÉÉ„Éó„ÅÆ„Çø„Ç§„Éà„É´"
                />
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div>
                  <Label>Ë™¨Êòé</Label>
                  <Textarea
                    value={step.description}
                    onChange={(e) => updateStep(step.id, { description: e.target.value })}
                    placeholder="„Çπ„ÉÜ„ÉÉ„Éó„ÅÆË©≥Á¥∞„Å™Ë™¨Êòé"
                  />
                </div>
                <div>
                  <Label>„É°„ÉÉ„Çª„Éº„Ç∏</Label>
                  <Textarea
                    value={step.message}
                    onChange={(e) => updateStep(step.id, { message: e.target.value })}
                    placeholder="„É¶„Éº„Ç∂„Éº„Å´Ë°®Á§∫„Åô„Çã„É°„ÉÉ„Çª„Éº„Ç∏"
                  />
                </div>

                {/* ÁîªÂÉèURL */}
                <div>
                  <Label>ÁîªÂÉèURLÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ</Label>
                  <Input
                    value={step.imageUrl || ''}
                    onChange={(e) => updateStep(step.id, { imageUrl: e.target.value })}
                    placeholder="ÁîªÂÉè„ÅÆURL"
                  />
                </div>

                {/* „Ç™„Éó„Ç∑„Éß„É≥ */}
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <Label className="font-semibold">
                      {step.type === 'decision' ? 'Êù°‰ª∂ÂàÜÂ≤ê„ÅÆÈÅ∏ÊäûËÇ¢' : 'ÈÅ∏ÊäûËÇ¢'}
                      <span className="text-sm text-gray-500 ml-1">
                        ({step.options.length}ÂÄã)
                      </span>
                      {step.type === 'decision' && (
                        <Badge variant="secondary" className="ml-2 bg-yellow-200 text-yellow-800">
                          üéØ Êù°‰ª∂ÂàÜÂ≤ê„É¢„Éº„Éâ
                        </Badge>
                      )}
                    </Label>
                    <div className="flex gap-2">
                      <Button size="sm" variant="outline" onClick={() => addOption(step.id)}>
                        <Plus className="w-4 h-4 mr-1" />
                        ÈÅ∏ÊäûËÇ¢ËøΩÂä†
                      </Button>
                      {step.type === 'decision' && step.options.length < 5 && (
                        <Button 
                          size="sm" 
                          variant="outline" 
                          className="text-blue-600 border-blue-300"
                          onClick={() => addDecisionOption(step.id)}
                          title={`Êù°‰ª∂ÂàÜÂ≤ê„ÇíËøΩÂä† (${step.options.length}/5)`}
                        >
                          <GitBranch className="w-4 h-4 mr-1" />
                          ÂàÜÂ≤êËøΩÂä† ({step.options.length}/5)
                        </Button>
                      )}
                    </div>
                  </div>

                  {step.type === 'decision' && (
                    <div className="bg-gradient-to-r from-yellow-100 to-orange-100 border-2 border-yellow-400 rounded-lg p-4 mb-4 shadow-sm">
                      <div className="flex items-center gap-2 mb-2">
                        <div className="p-1 bg-yellow-500 rounded-full">
                          <GitBranch className="w-4 h-4 text-white" />
                        </div>
                        <h4 className="text-lg font-bold text-yellow-800">üîÄ Êù°‰ª∂ÂàÜÂ≤ê„Éé„Éº„ÉâË®≠ÂÆö</h4>
                      </div>
                      <div className="bg-white border border-yellow-300 rounded p-3 mb-3">
                        <p className="text-sm text-yellow-800 mb-2">
                          <strong>üìã Ê©üËÉΩË™¨Êòé:</strong> „É¶„Éº„Ç∂„Éº„ÅÆÁä∂Ê≥Å„Å´Âøú„Åò„Å¶Áï∞„Å™„Çã„Çπ„ÉÜ„ÉÉ„Éó„Å´ÈÄ≤„ÇÄÂàÜÂ≤êÁÇπ„Åß„Åô„ÄÇ
                        </p>
                        <p className="text-xs text-yellow-700">
                          üí° ÂêÑÈÅ∏ÊäûËÇ¢„Å´ÂÖ∑‰ΩìÁöÑ„Å™Êù°‰ª∂„ÇíË®≠ÂÆö„Åó„ÄÅÈÅ©Âàá„Å™ÈÅ∑ÁßªÂÖà„ÇíÊåáÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ
                        </p>
                      </div>
                      <div className="flex items-center justify-between bg-white rounded p-2 border border-yellow-300">
                        <div className="flex items-center gap-2">
                          <span className="text-sm font-semibold text-yellow-800">ÁèæÂú®„ÅÆÂàÜÂ≤êÊï∞:</span>
                          <Badge variant="secondary" className="bg-yellow-200 text-yellow-800">
                            {step.options.length} / 5 È†ÖÁõÆ
                          </Badge>
                        </div>
                        <Button 
                          size="sm" 
                          variant="outline" 
                          className="text-green-600 border-green-400 bg-green-50 hover:bg-green-100"
                          onClick={() => addDecisionOption(step.id)}
                          disabled={step.options.length >= 5}
                        >
                          <Plus className="w-3 h-3 mr-1" />
                          Êù°‰ª∂È†ÖÁõÆËøΩÂä†
                        </Button>
                      </div>
                    </div>
                  )}

                  <div className="space-y-3">
                    {/* üéØ Êù°‰ª∂ÂàÜÂ≤ê„Éé„Éº„Éâ„ÅØÂ∏∏„Å´Á∑®ÈõÜUI„ÇíË°®Á§∫ */}
                    {step.type === 'decision' && (
                      <div className="bg-yellow-50 border-4 border-yellow-400 rounded-xl p-6 mb-6">
                        <div className="text-center mb-4">
                          <h4 className="text-xl font-bold text-yellow-800 flex items-center justify-center gap-2">
                            <GitBranch className="w-6 h-6" />
                            Êù°‰ª∂ÂàÜÂ≤ê„Éé„Éº„ÉâÁ∑®ÈõÜ„Ç®„É™„Ç¢
                          </h4>
                          <p className="text-sm text-yellow-700 mt-2">
                            „Åì„ÅÆ„Ç®„É™„Ç¢„ÅßÊù°‰ª∂È†ÖÁõÆ„ÇíËøΩÂä†„ÉªÁ∑®ÈõÜ„Åß„Åç„Åæ„Åô
                          </p>
                        </div>

                        {/* Êù°‰ª∂È†ÖÁõÆËøΩÂä†„Éú„Çø„É≥ */}
                        <div className="text-center mb-6">
                          <Button 
                            variant="outline" 
                            onClick={() => addDecisionOption(step.id)}
                            disabled={(step.options?.length || 0) >= 5}
                            className="text-green-600 border-green-400 bg-green-50 hover:bg-green-100"
                          >
                            <Plus className="w-4 h-4 mr-2" />
                            Êù°‰ª∂È†ÖÁõÆ„ÇíËøΩÂä† ({step.options?.length || 0}/5)
                          </Button>
                        </div>

                        {/* Êó¢Â≠ò„ÅÆÊù°‰ª∂È†ÖÁõÆ‰∏ÄË¶ß */}
                        <div className="space-y-4">
                          {step.options && step.options.length > 0 ? (
                            step.options.map((option, optionIndex) => (
                              <div key={`decision-${step.id}-${optionIndex}`} 
                                   className="bg-white border-2 border-blue-300 rounded-lg p-4">
                                <div className="flex items-center justify-between mb-3">
                                  <Badge variant="secondary" className="text-base">
                                    Êù°‰ª∂È†ÖÁõÆ {optionIndex + 1}
                                  </Badge>
                                  {(step.options?.length || 0) > 2 && (
                                    <Button
                                      size="sm"
                                      variant="destructive"
                                      onClick={() => removeOption(step.id, optionIndex)}
                                    >
                                      <Trash2 className="w-4 h-4" />
                                    </Button>
                                  )}
                                </div>

                                <div className="space-y-3">
                                  <div>
                                    <Label>Êù°‰ª∂„ÉÜ„Ç≠„Çπ„Éà</Label>
                                    <Input
                                      value={option.text || ''}
                                      onChange={(e) => updateOption(step.id, optionIndex, { text: e.target.value })}
                                      placeholder="Êù°‰ª∂„ÅÆË™¨Êòé„ÇíÂÖ•Âäõ"
                                    />
                                  </div>

                                  <div>
                                    <Label>Êù°‰ª∂„Çø„Ç§„Éó</Label>
                                    <select
                                      value={option.conditionType || 'other'}
                                      onChange={(e) => updateOption(step.id, optionIndex, { conditionType: e.target.value as any })}
                                      className="w-full border rounded px-3 py-2 bg-white"
                                    >
                                      <option value="yes">„ÅØ„ÅÑÔºàËÇØÂÆöÔºâ</option>
                                      <option value="no">„ÅÑ„ÅÑ„ÅàÔºàÂê¶ÂÆöÔºâ</option>
                                      <option value="other">„Åù„ÅÆ‰ªñ</option>
                                    </select>
                                  </div>

                                  <div>
                                    <Label>ÈÅ∑ÁßªÂÖà</Label>
                                    <select
                                      value={option.nextStepId || ''}
                                      onChange={(e) => updateOption(step.id, optionIndex, { nextStepId: e.target.value })}
                                      className="w-full border rounded px-3 py-2 bg-white"
                                    >
                                      <option value="">ÈÅ∑ÁßªÂÖà„ÇíÈÅ∏Êäû</option>
                                      {editedFlow?.steps?.filter(s => s.id !== step.id).map(targetStep => (
                                        <option key={targetStep.id} value={targetStep.id}>
                                          {targetStep.title}
                                        </option>
                                      ))}
                                      <option value="end">„Éï„É≠„ÉºÁµÇ‰∫Ü</option>
                                    </select>
                                  </div>

                                  <div className="flex items-center space-x-2">
                                    <input
                                      type="checkbox"
                                      checked={Boolean(option.isTerminal)}
                                      onChange={(e) => updateOption(step.id, optionIndex, { isTerminal: e.target.checked })}
                                    />
                                    <Label>„Åì„ÅÆÈÅ∏ÊäûËÇ¢„Åß„Éï„É≠„Éº„ÇíÁµÇ‰∫Ü</Label>
                                  </div>
                                </div>
                              </div>
                            ))
                          ) : (
                            <div className="text-center py-6 text-gray-500">
                              <p>„Åæ„Å†Êù°‰ª∂È†ÖÁõÆ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</p>
                              <p className="text-sm">‰∏ä„ÅÆ„Éú„Çø„É≥„Åã„ÇâÊù°‰ª∂È†ÖÁõÆ„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ</p>
                            </div>
                          )}
                        </div>
                      </div>
                    )}

                    {/* ÈÄöÂ∏∏„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó„ÅÆÈÅ∏ÊäûËÇ¢Ë°®Á§∫ */}
                    {step.type !== 'decision' && step.options && step.options.map((option, optionIndex) => (
                      <div key={`${step.id}-option-${optionIndex}`} className="border-2 rounded-lg p-4 space-y-3 border-gray-200 bg-gray-50">
                        <div className="flex items-center justify-between">
                          <Badge variant="secondary">
                            {step.type === 'decision' ? 'Êù°‰ª∂È†ÖÁõÆ' : 'ÈÅ∏ÊäûËÇ¢'} {optionIndex + 1}
                          </Badge>
                          {((step.type === 'decision' && step.options.length > 2) || (step.type !== 'decision' && step.options.length > 1)) && (
                            <Button
                              size="sm"
                              variant="ghost"
                              onClick={() => removeOption(step.id, optionIndex)}
                            >
                              <Trash2 className="w-4 h-4" />
                            </Button>
                          )}
                        </div>

                        <div>
                          <Label>{step.type === 'decision' ? 'Êù°‰ª∂„ÉÜ„Ç≠„Çπ„Éà' : 'ÈÅ∏ÊäûËÇ¢„ÅÆ„ÉÜ„Ç≠„Çπ„Éà'}</Label>
                          <Input
                            value={option.text || ''}
                            onChange={(e) => updateOption(step.id, optionIndex, { text: e.target.value })}
                            placeholder={step.type === 'decision' ? 'Êù°‰ª∂„ÅÆË™¨Êòé„ÇíÂÖ•Âäõ' : 'ÈÅ∏ÊäûËÇ¢„ÅÆ„ÉÜ„Ç≠„Çπ„Éà'}
                          />
                        </div>

                        {step.type === 'decision' && (
                          <div>
                            <Label>Êù°‰ª∂„Çø„Ç§„Éó</Label>
                            <select
                              value={option.conditionType || 'other'}
                              onChange={(e) => updateOption(step.id, optionIndex, { conditionType: e.target.value as any })}
                              className="w-full border rounded px-3 py-2 bg-white"
                            >
                              <option value="yes">„ÅØ„ÅÑÔºàËÇØÂÆöÔºâ</option>
                              <option value="no">„ÅÑ„ÅÑ„ÅàÔºàÂê¶ÂÆöÔºâ</option>
                              <option value="other">„Åù„ÅÆ‰ªñ</option>
                            </select>
                          </div>
                        )}

                        <div>
                          <Label>ÈÅ∑ÁßªÂÖà</Label>
                          <select
                            value={option.nextStepId || ''}
                            onChange={(e) => updateOption(step.id, optionIndex, { nextStepId: e.target.value })}
                            className="w-full border rounded px-3 py-2 bg-white"
                          >
                            <option value="">ÈÅ∑ÁßªÂÖà„ÇíÈÅ∏Êäû</option>
                            {editedFlow?.steps?.filter(s => s.id !== step.id).map(targetStep => (
                              <option key={targetStep.id} value={targetStep.id}>
                                {targetStep.title}
                              </option>
                            ))}
                            <option value="end">„Éï„É≠„ÉºÁµÇ‰∫Ü</option>
                          </select>
                        </div>

                        <div className="flex items-center space-x-2">
                          <input
                            type="checkbox"
                            checked={Boolean(option.isTerminal)}
                            onChange={(e) => updateOption(step.id, optionIndex, { isTerminal: e.target.checked })}
                          />
                          <Label>„Åì„ÅÆÈÅ∏ÊäûËÇ¢„Åß„Éï„É≠„Éº„ÇíÁµÇ‰∫Ü</Label>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* ÂâäÈô§Á¢∫Ë™ç„ÉÄ„Ç§„Ç¢„É≠„Ç∞ */}
      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>„Çπ„ÉÜ„ÉÉ„Éó„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü</AlertDialogTitle>
            <AlertDialogDescription>
              „Åì„ÅÆÊìç‰Ωú„ÅØÂèñ„ÇäÊ∂à„Åô„Åì„Å®„Åå„Åß„Åç„Åæ„Åõ„Çì„ÄÇ„Åì„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó„ÇíÂÆåÂÖ®„Å´ÂâäÈô§„Åó„Åæ„Åô„ÄÇ
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>„Ç≠„É£„É≥„Çª„É´</AlertDialogCancel>
            <AlertDialogAction onClick={() => stepToDelete && deleteStep(stepToDelete)}>
              ÂâäÈô§
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
};

export default EmergencyFlowEditor;