import React, { useState, useEffect, useCallback, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { Save, Plus, Trash2, Edit, Check, X, GitBranch, Settings } from 'lucide-react';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";

interface FlowStep {
  id: string;
  title: string;
  description: string;
  message: string;
  type: 'start' | 'step' | 'decision' | 'end';
  imageUrl?: string;
  options: Array<{
    text: string;
    nextStepId: string;
    isTerminal: boolean;
    conditionType: 'yes' | 'no' | 'other';
    condition?: string; // Êù°‰ª∂ÂàÜÂ≤ê„ÅÆÊù°‰ª∂
  }>;
}

interface FlowData {
  id: string;
  title: string;
  description: string;
  triggerKeywords: string[];
  steps: FlowStep[];
  updatedAt?: string;
}

interface EmergencyFlowEditorProps {
  flowData: FlowData | null;
  onSave?: (data: FlowData) => void;
  selectedFilePath?: string | null; // üéØ Á∑®ÈõÜÂØæË±°„ÅÆ„Éï„Ç°„Ç§„É´„Éë„Çπ
}

const EmergencyFlowEditor: React.FC<EmergencyFlowEditorProps> = ({ flowData, onSave, selectedFilePath }) => {
  const { toast } = useToast();
  const [editedFlow, setEditedFlow] = useState<FlowData | null>(null);
  const [isSaving, setIsSaving] = useState(false);
  const [editingStepId, setEditingStepId] = useState<string | null>(null);
  const [editingTitle, setEditingTitle] = useState(false);
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [stepToDelete, setStepToDelete] = useState<string | null>(null);
  const [editingStepTitle, setEditingStepTitle] = useState<string | null>(null);

  // flowData„ÅåÂ§âÊõ¥„Åï„Çå„Åü„ÇâÁ∑®ÈõÜÁî®„Éá„Éº„Çø„ÇíÊõ¥Êñ∞
  useEffect(() => {
    console.log('üîÑ flowDataÂ§âÊõ¥Ê§úÁü•:', flowData);

    if (flowData) {
      // slides„Åã„Çâsteps„Å∏„ÅÆÂ§âÊèõ„ÇÇÂê´„ÇÅ„Åü„Éá„Éº„Çø„ÅÆÊï¥ÂêàÊÄß„ÇíÁ¢∫Ë™ç„Éª‰øÆÊ≠£
      const processedData = {
        ...flowData,
        steps: (flowData.steps || flowData.slides || [])?.map(step => {
          console.log(`üîç „Çπ„ÉÜ„ÉÉ„Éó ${step.id} (${step.type}) „ÅÆ„Ç™„Éó„Ç∑„Éß„É≥:`, step.options);

          // Êù°‰ª∂ÂàÜÂ≤ê„Éé„Éº„Éâ„ÅÆÂ†¥Âêà„ÄÅÊó¢Â≠ò„ÅÆoptions„Çí‰øùÊåÅ„Åó„ÄÅ‰∏çË∂≥„Åå„ÅÇ„Çå„Å∞Ë£úÂÆåÔºàÂº∑ÂåñÁâàÔºâ
            if (step.type === 'decision') {
              const existingOptions = step.options || [];
              console.log(`üìä Êù°‰ª∂ÂàÜÂ≤ê ${step.id} „ÅÆÊó¢Â≠ò„Ç™„Éó„Ç∑„Éß„É≥Êï∞:`, existingOptions.length);

              // üéØ Êù°‰ª∂ÂàÜÂ≤ê„ÅÆÈÅ∏ÊäûËÇ¢„ÇíÁ¢∫ÂÆü„Å´Ë®≠ÂÆöÔºàÊñ∞Ë¶è‰ΩúÊàêÊôÇ„Å®ÂêåÁ≠âÔºâ
              const validatedOptions = existingOptions.length > 0 ? existingOptions.map((option, index) => {
                console.log(`üîß „Ç™„Éó„Ç∑„Éß„É≥ ${index + 1} ‰øÆÊ≠£Ââç:`, option);

                // Êñ∞Ë¶è‰ΩúÊàêÊôÇ„Å®Âêå„Åò„É¨„Éô„É´„ÅÆÊï¥ÂΩ¢Âá¶ÁêÜ„ÇíÈÅ©Áî®
                const validatedOption = {
                  text: option.text || option.label || (option.conditionType === 'yes' ? '„ÅØ„ÅÑÔºàËÇØÂÆöÁöÑÂõûÁ≠îÔºâ' : option.conditionType === 'no' ? '„ÅÑ„ÅÑ„ÅàÔºàÂê¶ÂÆöÁöÑÂõûÁ≠îÔºâ' : '„Åù„ÅÆ‰ªñ„ÅÆÁä∂Ê≥Å'),
                  nextStepId: option.nextStepId || option.targetStepId || '',
                  isTerminal: Boolean(option.isTerminal || option.terminal),
                  conditionType: (option.conditionType as 'yes' | 'no' | 'other') || (index === 0 ? 'yes' : index === 1 ? 'no' : 'other'),
                  condition: option.condition || option.description || option.detail || ''
                };

                console.log(`‚úÖ „Ç™„Éó„Ç∑„Éß„É≥ ${index + 1} ‰øÆÊ≠£ÂæåÔºàÊñ∞Ë¶è‰ΩúÊàêÊôÇÂêåÁ≠âÔºâ:`, validatedOption);
                return validatedOption;
              }) : [
                { 
                  text: '„ÅØ„ÅÑÔºàËÇØÂÆöÁöÑÂõûÁ≠îÔºâ', 
                  nextStepId: '', 
                  isTerminal: false, 
                  conditionType: 'yes' as const,
                  condition: 'Êù°‰ª∂„ÅåÊ∫Ä„Åü„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà'
                },
                { 
                  text: '„ÅÑ„ÅÑ„ÅàÔºàÂê¶ÂÆöÁöÑÂõûÁ≠îÔºâ', 
                  nextStepId: '', 
                  isTerminal: false, 
                  conditionType: 'no' as const,
                  condition: 'Êù°‰ª∂„ÅåÊ∫Ä„Åü„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà'
                }
              ];

              console.log(`üéØ Êù°‰ª∂ÂàÜÂ≤ê ${step.id} „ÅÆÊúÄÁµÇ„Ç™„Éó„Ç∑„Éß„É≥ÔºàÂº∑ÂåñÁâàÔºâ:`, validatedOptions);

              return {
                ...step,
                // description „Å® message „ÅÆÁµ±‰∏Ä
                description: step.description || step.message || '',
                message: step.message || step.description || '',
                options: validatedOptions
              };
          } else {
            // ÈÄöÂ∏∏„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó„ÅÆÂ†¥Âêà
            return {
              ...step,
              description: step.description || step.message || '',
              message: step.message || step.description || '',
              options: step.options || [{
                text: 'Ê¨°„Å∏', 
                nextStepId: '', 
                isTerminal: false, 
                conditionType: 'other' as const,
                condition: ''
              }]
            };
          }
        }) || []
      };

      console.log('üìä flowData„ÇísetEditedFlow„Å´Ë®≠ÂÆö:', {
        id: processedData.id,
        title: processedData.title,
        stepsCount: processedData.steps?.length || 0,
        updatedAt: processedData.updatedAt,
        decisionSteps: processedData.steps?.filter(s => s.type === 'decision').length || 0,
        decisionStepsDetail: processedData.steps?.filter(s => s.type === 'decision').map(s => ({
          id: s.id,
          title: s.title,
          optionsCount: s.options?.length || 0
        }))
      });

      setEditedFlow(processedData);
    } else {
      // Êñ∞Ë¶è‰ΩúÊàê„ÅÆÂ†¥Âêà
      const newFlow: FlowData = {
        id: `flow_${Date.now()}`,
        title: 'Êñ∞„Åó„ÅÑÂøúÊÄ•Âá¶ÁΩÆ„Éï„É≠„Éº',
        description: '',
        triggerKeywords: [],
        steps: [{
          id: 'start',
          title: 'ÈñãÂßã',
          description: '',
          message: '„Éï„É≠„Éº„ÇíÈñãÂßã„Åó„Åæ„Åô',
          type: 'start',
          options: [{
            text: 'Ê¨°„Å∏',
            nextStepId: '',
            isTerminal: false,
            conditionType: 'other'
          }]
        }],
        updatedAt: new Date().toISOString()
      };
      console.log('üÜï Êñ∞Ë¶è„Éï„É≠„Éº‰ΩúÊàê:', newFlow);
      setEditedFlow(newFlow);
    }
  }, [flowData]);

  // „Éá„Éº„ÇøÊõ¥Êñ∞„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÇíËøΩÂä†ÔºàÁÑ°Èôê„É´„Éº„ÉóÈò≤Ê≠¢Ôºâ
  useEffect(() => {
    let isRefreshing = false; // ÂÜçÂèñÂæó‰∏≠„Éï„É©„Ç∞

    const handleDataRefresh = (event: any) => {
      if (isRefreshing) return; // ÂÜçÂèñÂæó‰∏≠„ÅØÁÑ°Ë¶ñ

      const { data, flowId } = event.detail;
      console.log('üîÑ flowDataRefreshed„Ç§„Éô„É≥„ÉàÂèó‰ø°:', { flowId, dataId: data?.id });

      if (data && editedFlow && data.id === editedFlow.id) {
        console.log('‚úÖ Á∑®ÈõÜ‰∏≠„Éï„É≠„Éº„ÅÆ„Éá„Éº„Çø„ÇíÊõ¥Êñ∞');
        setEditedFlow({ ...data });
      }
    };

    // Âº∑Âà∂ÁöÑ„Å™„Éá„Éº„ÇøÂÜçÂèñÂæóÂá¶ÁêÜÔºàÈò≤Âæ°ÁöÑ„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞Ôºâ
    const handleForceRefresh = async (event: any) => {
      if (isRefreshing) {
        console.log('‚ö†Ô∏è Êó¢„Å´ÂÜçÂèñÂæó‰∏≠„ÅÆ„Åü„ÇÅ„ÄÅ„É™„ÇØ„Ç®„Çπ„Éà„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åô');
        return;
      }

      const { flowId } = event.detail;
      console.log('üîÑ Âº∑Âà∂„Éá„Éº„ÇøÂÜçÂèñÂæóË¶ÅÊ±Ç:', flowId);

      if (editedFlow && (flowId === editedFlow.id || !flowId)) {
        isRefreshing = true; // ÂÜçÂèñÂæóÈñãÂßã
        console.log('üíæ ‰øùÂ≠òÂæå„ÅÆ„Éá„Éº„Çø„ÇíÂÜçÂèñÂæó„Åó„Åæ„Åô...');

        try {
          // „Çø„Ç§„É†„Ç¢„Ç¶„Éà‰ªò„Åç„Åß„É™„ÇØ„Ç®„Çπ„ÉàÂÆüË°å
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), 10000); // 10Áßí„Çø„Ç§„É†„Ç¢„Ç¶„Éà

          const timestamp = Date.now();
          const response = await fetch(`/api/emergency-flow/get/${editedFlow.id}?ts=${timestamp}&_force=true`, {
            method: 'GET',
            headers: {
              'Cache-Control': 'no-cache, no-store, must-revalidate',
              'Pragma': 'no-cache'
            },
            signal: controller.signal
          });

          clearTimeout(timeoutId);

          if (response.ok) {
            const result = await response.json();
            const freshData = result.data || result;

            console.log('üîÑ ÂÜçÂèñÂæó„Åó„Åü„Éá„Éº„Çø:', {
              id: freshData.id,
              title: freshData.title,
              stepsCount: freshData.steps?.length || 0,
              updatedAt: freshData.updatedAt
            });

            // „Éá„Éº„Çø„ÅÆÊï¥ÂêàÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
            if (freshData.id === editedFlow.id) {
              setEditedFlow({ ...freshData });
              console.log('‚úÖ „Ç®„Éá„Ç£„Çø„Éº„ÅÆ„Éá„Éº„Çø„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü');
            }
          } else {
            console.error('‚ùå „Éá„Éº„ÇøÂÜçÂèñÂæó„Å´Â§±Êïó:', response.status);
          }
        } catch (error) {
          if (error.name === 'AbortError') {
            console.warn('‚ö†Ô∏è „Éá„Éº„ÇøÂÜçÂèñÂæó„Åå„Çø„Ç§„É†„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„Åü');
          } else {
            console.error('‚ùå „Éá„Éº„ÇøÂÜçÂèñÂæó„Ç®„É©„Éº:', error);
          }
        } finally {
          isRefreshing = false; // ÂÜçÂèñÂæóÁµÇ‰∫Ü
        }
      }
    };

    window.addEventListener('flowDataRefreshed', handleDataRefresh);
    window.addEventListener('forceRefreshFlowData', handleForceRefresh);

    return () => {
      window.removeEventListener('flowDataRefreshed', handleDataRefresh);
      window.removeEventListener('forceRefreshFlowData', handleForceRefresh);
      isRefreshing = false; // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
    };
  }, [editedFlow?.id]); // editedFlow.id„ÅÆ„Åø„Å´‰æùÂ≠ò

  // ‰øùÂ≠òÂá¶ÁêÜ„ÅÆÊîπÂñÑ
  const handleSave = useCallback(async () => {
    if (!editedFlow) return;

    setIsSaving(true);
    try {
      // ‰øùÂ≠ò„Éá„Éº„Çø„ÅÆÊ§úË®º
      if (!editedFlow.title.trim()) {
        throw new Error('„Çø„Ç§„Éà„É´„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
      }

      if (editedFlow.steps.length === 0) {
        throw new Error('Â∞ë„Å™„Åè„Å®„ÇÇ1„Å§„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó„ÅåÂøÖË¶Å„Åß„Åô');
      }

      // ‰øùÂ≠ò„Éá„Éº„Çø„ÇíÊ∫ñÂÇôÔºàsteps/slidesÁµ±‰∏Ä„Å®„Éá„Éº„ÇøÊï¥ÂêàÊÄßÁ¢∫‰øùÔºâ
      const saveData = {
        ...editedFlow,
        steps: editedFlow.steps.map(step => ({
          ...step,
          // description „Å® message „ÇíÂêåÊúü
          description: step.description || step.message || '',
          message: step.message || step.description || '',
          // Á©∫„ÅÆÂÄ§„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
          imageUrl: step.imageUrl || '',
          options: step.options.map(option => ({
            ...option,
            text: option.text || '',
            nextStepId: option.nextStepId || '',
            condition: option.condition || '',
            isTerminal: Boolean(option.isTerminal),
            conditionType: option.conditionType || 'other'
          }))
        })),
        // slides„Éï„Ç£„Éº„É´„Éâ„ÇÇÂêåÊúüÔºàÂæåÊñπ‰∫íÊèõÊÄßÔºâ
        slides: editedFlow.steps.map(step => ({
          ...step,
          description: step.description || step.message || '',
          message: step.message || step.description || '',
          imageUrl: step.imageUrl || ''
        })),
        updatedAt: new Date().toISOString(),
        savedTimestamp: Date.now()
      };

      // üéØ ‰øùÂ≠òÊôÇ„Å´„Éï„Ç°„Ç§„É´„Éë„Çπ„ÇíÊòéÁ§∫ÁöÑ„Å´ÊåáÂÆö
      const requestBody = {
        ...saveData,
        filePath: selectedFilePath || `knowledge-base/troubleshooting/${editedFlow.id}.json`
      };

      console.log('üíæ ‰øùÂ≠ò„É™„ÇØ„Ç®„Çπ„Éà:', {
        id: saveData.id,
        title: saveData.title,
        filePath: requestBody.filePath,
        stepsCount: saveData.steps?.length || 0
      });

      const response = await fetch(`/api/emergency-flow/save`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Cache-Control': 'no-cache, no-store, must-revalidate'
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.error || `‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü (${response.status})`);
      }

      const result = await response.json();

      if (result.success) {
      console.log(`‚úÖ ‰øùÂ≠òÊàêÂäü:`, result);

      // üßπ ‰øùÂ≠òÂæå„Å´„Ç≠„É£„ÉÉ„Ç∑„É•„ÇíÂº∑Âà∂„ÇØ„É™„Ç¢
      if ('caches' in window) {
        try {
          const cacheNames = await caches.keys();
          await Promise.all(cacheNames.map(name => caches.delete(name)));
          console.log('üßπ ‰øùÂ≠òÂæå„Ç≠„É£„ÉÉ„Ç∑„É•„ÇØ„É™„Ç¢ÂÆå‰∫Ü');
        } catch (cacheError) {
          console.warn('‚ö†Ô∏è „Ç≠„É£„ÉÉ„Ç∑„É•„ÇØ„É™„Ç¢„Ç®„É©„Éº:', cacheError);
        }
      }

      toast({
        title: "‰øùÂ≠òÂÆå‰∫Ü",
        description: `„Éï„É≠„Éº„Äå${editedFlow.title}„Äç„Åå‰øùÂ≠ò„Åï„Çå„Åæ„Åó„Åü (${saveData.steps?.length || 0}„Çπ„ÉÜ„ÉÉ„Éó)`,
      });

      // ‰øùÂ≠ò„Åï„Çå„Åü„Éá„Éº„Çø„Åß„É≠„Éº„Ç´„É´Áä∂ÊÖã„ÇíÊõ¥Êñ∞
      if (onSave) {
        onSave(saveData);
      }

      // ‰ªñ„ÅÆ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Å´‰øùÂ≠òÂÆå‰∫Ü„ÇíÈÄöÁü•
      if (typeof window !== 'undefined') {
        window.dispatchEvent(new CustomEvent('flowSaved', { 
          detail: { 
            savedData: saveData, 
            filePath: selectedFilePath,
            timestamp: Date.now(),
            stepsCount: saveData.steps?.length || 0
          }
        }));

        // „Éï„É≠„Éº‰∏ÄË¶ß„ÅÆÂº∑Âà∂Êõ¥Êñ∞„ÇíË¶ÅÊ±Ç
        window.dispatchEvent(new CustomEvent('forceRefreshFlowList'));
      }
    }

      // ‰øùÂ≠ò„Åï„Çå„Åü„Éá„Éº„Çø„ÅßÁèæÂú®„ÅÆÁ∑®ÈõÜ„Éá„Éº„Çø„ÇíÊõ¥Êñ∞
      setEditedFlow(saveData);

      // ‰øùÂ≠òÊàêÂäüÂæå„ÅØÂº∑Âà∂ÁöÑ„Å´„Ç®„Éá„Ç£„Çø„Éº„Éá„Éº„Çø„ÇíÊõ¥Êñ∞
      console.log('üíæ ‰øùÂ≠òÊàêÂäü - „Ç®„Éá„Ç£„Çø„Éº„Éá„Éº„Çø„ÇíÁõ¥Êé•Êõ¥Êñ∞');
      setEditedFlow({ ...saveData });

      // üîÑ ÂÆåÂÖ®„Å™„Éï„Ç°„Ç§„É´Ê§úË®º„ÇíÂÆüË°å
      try {
        const verifyResponse = await fetch(`/api/emergency-flow-router/get/${editedFlow.id}?ts=${Date.now()}&verify=true`, {
          method: 'GET',
          headers: {
            'Cache-Control': 'no-cache, no-store, must-revalidate',
            'Pragma': 'no-cache'
          }
        });

        if (verifyResponse.ok) {
          const verifyData = await verifyResponse.json();
          console.log('üîç ‰øùÂ≠òÂæåÊ§úË®º„Éá„Éº„Çø:', {
            id: verifyData.id,
            stepsCount: verifyData.steps?.length || 0,
            updatedAt: verifyData.updatedAt
          });

          // Ê§úË®º„Éá„Éº„Çø„Å®‰øùÂ≠ò„Éá„Éº„Çø„Åå‰∏ÄËá¥„Åô„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
          const stepsMatch = (verifyData.steps?.length || 0) === (saveData.steps?.length || 0);
          console.log(`üìä „Éá„Éº„ÇøÊï¥ÂêàÊÄß„ÉÅ„Çß„ÉÉ„ÇØ: ${stepsMatch ? '‰∏ÄËá¥' : '‰∏ç‰∏ÄËá¥'}`);

          if (!stepsMatch) {
            console.warn('‚ö†Ô∏è ‰øùÂ≠ò„Éá„Éº„Çø„Å®Ê§úË®º„Éá„Éº„Çø„Åå‰∏ç‰∏ÄËá¥ - ÂÜç‰øùÂ≠ò„ÇíË©¶Ë°å');
            // ÂÜç‰øùÂ≠ò„ÇíË©¶Ë°å
            const retryResponse = await fetch(`/api/emergency-flow-router/save/${editedFlow.id}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Cache-Control': 'no-cache'
              },
              body: JSON.stringify(saveData)
            });

            if (retryResponse.ok) {
              console.log('‚úÖ ÂÜç‰øùÂ≠òÂÆå‰∫Ü');
            }
          }
        }
      } catch (verifyError) {
        console.warn('‚ö†Ô∏è ‰øùÂ≠òÂæåÊ§úË®º„Ç®„É©„Éº:', verifyError);
      }

      // üßπ „Éñ„É©„Ç¶„Ç∂„Ç≠„É£„ÉÉ„Ç∑„É•„ÇíÂÆåÂÖ®„ÇØ„É™„Ç¢
      if ('caches' in window) {
        try {
          const cacheNames = await caches.keys();
          await Promise.all(cacheNames.map(name => caches.delete(name)));
          console.log('üßπ „Éñ„É©„Ç¶„Ç∂„Ç≠„É£„ÉÉ„Ç∑„É•ÂÆåÂÖ®„ÇØ„É™„Ç¢ÂÆå‰∫Ü');
        } catch (cacheError) {
          console.warn('‚ö†Ô∏è „Ç≠„É£„ÉÉ„Ç∑„É•„ÇØ„É™„Ç¢„Ç®„É©„Éº:', cacheError);
        }
      }

      // „Éá„Éº„ÇøÊõ¥Êñ∞„Ç§„Éô„É≥„Éà„ÇíÁô∫Ë°åÔºàÈáçË§áÈò≤Ê≠¢„ÅßÁ¢∫ÂÆü„Å´ÂèçÊò†Ôºâ
      setTimeout(() => {
        // „Ç§„Éô„É≥„ÉàÁô∫Ë°å„ÅÆÈáçË§á„ÇíÈò≤„Åê
        const eventDetail = { 
          flowId: editedFlow.id, 
          data: saveData,
          timestamp: Date.now(),
          forceRefresh: true,
          source: 'emergency-flow-editor'
        };

        window.dispatchEvent(new CustomEvent('flowDataUpdated', { detail: eventDetail }));

        // „Éï„É≠„Éº‰∏ÄË¶ß„ÅÆÊõ¥Êñ∞„ÅØ1Âõû„Å†„ÅëÂÆüË°å
        window.dispatchEvent(new CustomEvent('forceRefreshFlowList', {
          detail: { 
            forceRefresh: true,
            timestamp: Date.now(),
            updatedFlowId: editedFlow.id,
            preventLoop: true
          }
        }));

        console.log('üîÑ ‰øùÂ≠òÂæå„Ç§„Éô„É≥„ÉàÁô∫Ë°åÂÆå‰∫ÜÔºàÈáçË§áÈò≤Ê≠¢Ôºâ');
      }, 500);



    } catch (error) {
      console.error('‚ùå ‰øùÂ≠ò„Ç®„É©„Éº:', error);
      toast({
        title: "‰øùÂ≠ò„Ç®„É©„Éº",
        description: error instanceof Error ? error.message : "„Éï„É≠„Éº„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü",
        variant: "destructive"
      });
    } finally {
      setIsSaving(false);
    }
  }, [editedFlow, onSave, toast, selectedFilePath]);

  // „Çø„Ç§„Éà„É´Êõ¥Êñ∞
  const updateTitle = (newTitle: string) => {
    if (editedFlow) {
      setEditedFlow({
        ...editedFlow,
        title: newTitle
      });
    }
  };

  // Ë™¨ÊòéÊõ¥Êñ∞
  const updateDescription = (newDescription: string) => {
    if (editedFlow) {
      setEditedFlow({
        ...editedFlow,
        description: newDescription
      });
    }
  };

  // „Çπ„ÉÜ„ÉÉ„ÉóÊõ¥Êñ∞
  const updateStep = (stepId: string, updates: Partial<FlowStep>) => {
    if (!editedFlow) return;

    setEditedFlow({
      ...editedFlow,
      steps: editedFlow.steps.map(step =>
        step.id === stepId ? { ...step, ...updates } : step
      )
    });
  };

  // „Çπ„ÉÜ„ÉÉ„Éó„Çø„Ç§„Éà„É´Êõ¥Êñ∞
  const updateStepTitle = (stepId: string, newTitle: string) => {
    updateStep(stepId, { title: newTitle });
  };

  // Êñ∞„Åó„ÅÑ„Çπ„ÉÜ„ÉÉ„ÉóËøΩÂä†
  const addStep = (type: FlowStep['type']) => {
    if (!editedFlow) return;

    const newStepId = `step_${Date.now()}`;
    const newStep: FlowStep = {
      id: newStepId,
      title: type === 'decision' ? 'Êñ∞„Åó„ÅÑÊù°‰ª∂ÂàÜÂ≤ê' : 'Êñ∞„Åó„ÅÑ„Çπ„ÉÜ„ÉÉ„Éó',
      description: '',
      message: '',
      type,
      options: type === 'decision' ? [
        { 
          text: '„ÅØ„ÅÑ', 
          nextStepId: '', 
          isTerminal: false, 
          conditionType: 'yes',
          condition: ''
        },
        { 
          text: '„ÅÑ„ÅÑ„Åà', 
          nextStepId: '', 
          isTerminal: false, 
          conditionType: 'no',
          condition: ''
        }
      ] : [
        { 
          text: 'Ê¨°„Å∏', 
          nextStepId: '', 
          isTerminal: false, 
          conditionType: 'other',
          condition: ''
        }
      ]
    };

    setEditedFlow({
      ...editedFlow,
      steps: [...editedFlow.steps, newStep]
    });
  };

  // „Çπ„ÉÜ„ÉÉ„ÉóÂâäÈô§
  const deleteStep = (stepId: string) => {
    if (!editedFlow) return;

    setEditedFlow({
      ...editedFlow,
      steps: editedFlow.steps.filter(step => step.id !== stepId)
    });

    setShowDeleteDialog(false);
    setStepToDelete(null);
  };

  // „Ç™„Éó„Ç∑„Éß„É≥Êõ¥Êñ∞ÔºàÊù°‰ª∂ÂàÜÂ≤êÂØæÂøúÔºâ
  const updateOption = (stepId: string, optionIndex: number, updates: Partial<FlowStep['options'][0]>) => {
    if (!editedFlow) return;

    setEditedFlow({
      ...editedFlow,
      steps: editedFlow.steps.map(step =>
        step.id === stepId ? {
          ...step,
          options: step.options.map((option, index) =>
            index === optionIndex ? { ...option, ...updates } : option
          )
        } : step
      )
    });
  };

  // „Ç™„Éó„Ç∑„Éß„É≥ËøΩÂä†
  const addOption = (stepId: string) => {
    if (!editedFlow) return;

    const step = editedFlow.steps.find(s => s.id === stepId);
    if (!step) return;

    const newOption = {
      text: step.type === 'decision' ? 'Êñ∞„Åó„ÅÑÊù°‰ª∂' : 'Êñ∞„Åó„ÅÑÈÅ∏ÊäûËÇ¢',
      nextStepId: '',
      isTerminal: false,
      conditionType: step.type === 'decision' ? 'other' as const : 'other' as const,
      condition: ''
    };

    updateStep(stepId, {
      options: [...step.options, newOption]
    });
  };

  // Êù°‰ª∂ÂàÜÂ≤êÂ∞ÇÁî®„ÅÆÈÅ∏ÊäûËÇ¢ËøΩÂä†
  const addDecisionOption = (stepId: string) => {
    if (!editedFlow) return;

    const step = editedFlow.steps.find(s => s.id === stepId);
    if (!step || step.type !== 'decision') return;

    // ÊúÄÂ§ß5„Å§„Åæ„Åß„ÅÆÂà∂Èôê
    if (step.options.length >= 5) {
      toast({
        title: "ËøΩÂä†„Åß„Åç„Åæ„Åõ„Çì",
        description: "Êù°‰ª∂ÂàÜÂ≤ê„Åß„ÅØÊúÄÂ§ß5„Å§„Åæ„Åß„ÅÆÈÅ∏ÊäûËÇ¢„ÅåË®≠ÂÆö„Åß„Åç„Åæ„Åô",
        variant: "destructive"
      });
      return;
    }

    // Êó¢Â≠ò„ÅÆÊù°‰ª∂„Çø„Ç§„Éó„ÇíÁ¢∫Ë™ç
    const existingTypes = step.options.map(opt => opt.conditionType);
    let newConditionType: 'yes' | 'no' | 'other' = 'other';
    let newText = 'Êñ∞„Åó„ÅÑÊù°‰ª∂';

    // „Åæ„Å†Â≠òÂú®„Åó„Å™„ÅÑÊù°‰ª∂„Çø„Ç§„Éó„ÇíÂÑ™ÂÖàÁöÑ„Å´ËøΩÂä†
    if (!existingTypes.includes('yes')) {
      newConditionType = 'yes';
      newText = '„ÅØ„ÅÑ';
    } else if (!existingTypes.includes('no')) {
      newConditionType = 'no';
      newText = '„ÅÑ„ÅÑ„Åà';
    } else {
      // "„Åù„ÅÆ‰ªñ"„Çø„Ç§„Éó„ÇíÈÄ£Áï™„ÅßËøΩÂä†
      const otherCount = existingTypes.filter(type => type === 'other').length;
      newConditionType = 'other';
      newText = `„Åù„ÅÆ‰ªñ„ÅÆÁä∂Ê≥Å${otherCount > 0 ? ` ${otherCount + 1}` : ''}`;
    }

    const newOption = {
      text: newText,
      nextStepId: '',
      isTerminal: false,
      conditionType: newConditionType,
      condition: ''
    };

    updateStep(stepId, {
      options: [...step.options, newOption]
    });

    toast({
      title: "Êù°‰ª∂È†ÖÁõÆ„ÇíËøΩÂä†„Åó„Åæ„Åó„Åü",
      description: `Êñ∞„Åó„ÅÑÊù°‰ª∂„Äå${newText}„Äç„ÇíËøΩÂä†„Åó„Åæ„Åó„Åü„ÄÇÁ∑®ÈõÜ„Åó„Å¶Ë©≥Á¥∞„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`
    });
  };

  // Êù°‰ª∂ÂàÜÂ≤ê„ÅÆÊù°‰ª∂„Çø„Ç§„Éó„ÇíÂ§âÊõ¥
  const changeConditionType = (stepId: string, optionIndex: number, newType: 'yes' | 'no' | 'other') => {
    if (!editedFlow) return;

    const step = editedFlow.steps.find(s => s.id === stepId);
    if (!step || step.type !== 'decision') return;

    // ‰ªñ„ÅÆ„Ç™„Éó„Ç∑„Éß„É≥„ÅßÂêå„ÅòÊù°‰ª∂„Çø„Ç§„Éó„Åå‰Ωø„Çè„Çå„Å¶„ÅÑ„Å™„ÅÑ„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    const existingTypes = step.options.map((opt, idx) => idx !== optionIndex ? opt.conditionType : null);
    if (existingTypes.includes(newType)) {
      toast({
        title: "Ë≠¶Âëä",
        description: "„Åì„ÅÆÊù°‰ª∂„Çø„Ç§„Éó„ÅØÊó¢„Å´‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Åæ„Åô",
        variant: "destructive"
      });
      return;
    }

    // „Éá„Éï„Ç©„É´„Éà„ÉÜ„Ç≠„Çπ„Éà„ÇíË®≠ÂÆö
    let defaultText = '';
    switch (newType) {
      case 'yes':
        defaultText = '„ÅØ„ÅÑ';
        break;
      case 'no':
        defaultText = '„ÅÑ„ÅÑ„Åà';
        break;
      case 'other':
        defaultText = '„Åù„ÅÆ‰ªñ„ÅÆÁä∂Ê≥Å';
        break;
    }

    updateOption(stepId, optionIndex, { 
      conditionType: newType,
      text: defaultText
    });
  };

  // „Ç™„Éó„Ç∑„Éß„É≥ÂâäÈô§
  const removeOption = (stepId: string, optionIndex: number) => {
    if (!editedFlow) return;

    const step = editedFlow.steps.find(s => s.id === stepId);
    if (!step) return;

    // Êù°‰ª∂ÂàÜÂ≤ê„ÅÆÂ†¥Âêà„ÅØÊúÄ‰Ωé2„Å§„ÅÆÈÅ∏ÊäûËÇ¢„ÅåÂøÖË¶Å
    if (step.type === 'decision' && step.options.length <= 2) {
      toast({
        title: "ÂâäÈô§„Åß„Åç„Åæ„Åõ„Çì",
        description: "Êù°‰ª∂ÂàÜÂ≤ê„Åß„ÅØÊúÄ‰Ωé2„Å§„ÅÆÈÅ∏ÊäûËÇ¢„ÅåÂøÖË¶Å„Åß„Åô",
        variant: "destructive"
      });
      return;
    }

    // ÈÄöÂ∏∏„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó„ÅÆÂ†¥Âêà„ÅØÊúÄ‰Ωé1„Å§„ÅÆÈÅ∏ÊäûËÇ¢„ÅåÂøÖË¶Å
    if (step.type !== 'decision' && step.options.length <= 1) {
      toast({
        title: "ÂâäÈô§„Åß„Åç„Åæ„Åõ„Çì",
        description: "ÊúÄ‰Ωé1„Å§„ÅÆÈÅ∏ÊäûËÇ¢„ÅåÂøÖË¶Å„Åß„Åô",
        variant: "destructive"
      });
      return;
    }

    updateStep(stepId, {
      options: step.options.filter((_, index) => index !== optionIndex)
    });

    toast({
      title: "ÈÅ∏ÊäûËÇ¢„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü",
      description: `ÈÅ∏ÊäûËÇ¢ ${optionIndex + 1} „ÇíÂâäÈô§„Åó„Åæ„Åó„Åü`
    });
  };

  // „Ç≠„Éº„ÉØ„Éº„ÉâÊõ¥Êñ∞
  const updateKeywords = (keywords: string) => {
    if (!editedFlow) return;

    const keywordArray = keywords.split(',').map(k => k.trim()).filter(k => k);
    setEditedFlow({
      ...editedFlow,
      triggerKeywords: keywordArray
    });
  };

  if (!editedFlow) {
    return (
      <div className="flex items-center justify-center h-64">
        <p className="text-gray-500">Ë™≠„ÅøËæº„Åø‰∏≠...</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* „Éò„ÉÉ„ÉÄ„Éº */}
      <div className="flex items-center justify-between">
        <div className="flex-1">
          {editingTitle ? (
            <div className="flex items-center gap-2">
              <Input
                value={editedFlow.title}
                onChange={(e) => updateTitle(e.target.value)}
                className="text-xl font-bold"
                placeholder="„Éï„É≠„Éº„Çø„Ç§„Éà„É´„ÇíÂÖ•Âäõ"
              />
              <Button size="sm" onClick={() => setEditingTitle(false)}>
                <Check className="w-4 h-4" />
              </Button>
              <Button size="sm" variant="outline" onClick={() => setEditingTitle(false)}>
                <X className="w-4 h-4" />
              </Button>
            </div>
          ) : (
            <div className="flex items-center gap-2">
              <h2 className="text-xl font-bold">{editedFlow.title}</h2>
              <Button size="sm" variant="ghost" onClick={() => setEditingTitle(true)}>
                <Edit className="w-4 h-4" />
              </Button>
            </div>
          )}
        </div>
        <Button onClick={handleSave} disabled={isSaving}>
          <Save className="w-4 h-4 mr-2" />
          {isSaving ? '‰øùÂ≠ò‰∏≠...' : '‰øùÂ≠ò'}
        </Button>
      </div>

      {/* Ë™¨Êòé */}
      <div>
        <Label>Ë™¨Êòé</Label>
        <Textarea
          value={editedFlow.description}
          onChange={(e) => updateDescription(e.target.value)}
          placeholder="„Éï„É≠„Éº„ÅÆË™¨Êòé„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
        />
      </div>

      {/* „Éà„É™„Ç¨„Éº„Ç≠„Éº„ÉØ„Éº„Éâ */}
      <div>
        <Label>„Éà„É™„Ç¨„Éº„Ç≠„Éº„ÉØ„Éº„ÉâÔºà„Ç´„É≥„ÉûÂå∫Âàá„ÇäÔºâ</Label>
        <Input
          value={editedFlow.triggerKeywords.join(', ')}
          onChange={(e) => updateKeywords(e.target.value)}
          placeholder="„Ç®„É≥„Ç∏„É≥ÂÅúÊ≠¢, ÂÜçÂßãÂãï‰∏çÂèØ"
        />
      </div>

      {/* „Çπ„ÉÜ„ÉÉ„ÉóËøΩÂä†„Éú„Çø„É≥ */}
      <div className="flex gap-2">
        <Button variant="outline" onClick={() => addStep('step')}>
          <Plus className="w-4 h-4 mr-2" />
          „Çπ„ÉÜ„ÉÉ„ÉóËøΩÂä†
        </Button>
        <Button variant="outline" onClick={() => addStep('decision')}>
          <GitBranch className="w-4 h-4 mr-2" />
          Êù°‰ª∂ÂàÜÂ≤êËøΩÂä†
        </Button>
      </div>

      {/* „Çπ„ÉÜ„ÉÉ„Éó‰∏ÄË¶ß */}
      <div className="space-y-4">
        {editedFlow.steps.map((step, index) => (
          <Card key={step.id} className="relative">
            <CardHeader className="pb-2">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <Badge variant={step.type === 'decision' ? 'secondary' : 'default'}>
                    {step.type === 'start' && 'ÈñãÂßã'}
                    {step.type === 'step' && '„Çπ„ÉÜ„ÉÉ„Éó'}
                    {step.type === 'decision' && 'Êù°‰ª∂ÂàÜÂ≤ê'}
                    {step.type === 'end' && 'ÁµÇ‰∫Ü'}
                  </Badge>
                  <span className="text-sm text-gray-500">#{index + 1}</span>
                </div>
                <Button
                  size="sm"
                  variant="ghost"
                  onClick={() => {
                    setStepToDelete(step.id);
                    setShowDeleteDialog(true);
                  }}
                >
                  <Trash2 className="w-4 h-4" />
                </Button>
              </div>

              {/* „Çπ„ÉÜ„ÉÉ„Éó„Çø„Ç§„Éà„É´Á∑®ÈõÜ */}
              <div>
                <Label>„Çø„Ç§„Éà„É´</Label>
                <Input
                  value={step.title}
                  onChange={(e) => updateStepTitle(step.id, e.target.value)}
                  placeholder="„Çπ„ÉÜ„ÉÉ„Éó„ÅÆ„Çø„Ç§„Éà„É´"
                />
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div>
                  <Label>Ë™¨Êòé</Label>
                  <Textarea
                    value={step.description}
                    onChange={(e) => updateStep(step.id, { description: e.target.value })}
                    placeholder="„Çπ„ÉÜ„ÉÉ„Éó„ÅÆË©≥Á¥∞„Å™Ë™¨Êòé"
                  />
                </div>
                <div>
                  <Label>„É°„ÉÉ„Çª„Éº„Ç∏</Label>
                  <Textarea
                    value={step.message}
                    onChange={(e) => updateStep(step.id, { message: e.target.value })}
                    placeholder="„É¶„Éº„Ç∂„Éº„Å´Ë°®Á§∫„Åô„Çã„É°„ÉÉ„Çª„Éº„Ç∏"
                  />
                </div>

                {/* ÁîªÂÉèURL */}
                <div>
                  <Label>ÁîªÂÉèURLÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ</Label>
                  <Input
                    value={step.imageUrl || ''}
                    onChange={(e) => updateStep(step.id, { imageUrl: e.target.value })}
                    placeholder="ÁîªÂÉè„ÅÆURL"
                  />
                </div>

                {/* „Ç™„Éó„Ç∑„Éß„É≥ */}
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <Label className="font-semibold">
                      {step.type === 'decision' ? 'Êù°‰ª∂ÂàÜÂ≤ê„ÅÆÈÅ∏ÊäûËÇ¢' : 'ÈÅ∏ÊäûËÇ¢'}
                      <span className="text-sm text-gray-500 ml-1">
                        ({step.options.length}ÂÄã)
                      </span>
                      {step.type === 'decision' && (
                        <Badge variant="secondary" className="ml-2 bg-yellow-200 text-yellow-800">
                          üéØ Êù°‰ª∂ÂàÜÂ≤ê„É¢„Éº„Éâ
                        </Badge>
                      )}
                    </Label>
                    <div className="flex gap-2">
                      <Button size="sm" variant="outline" onClick={() => addOption(step.id)}>
                        <Plus className="w-4 h-4 mr-1" />
                        ÈÅ∏ÊäûËÇ¢ËøΩÂä†
                      </Button>
                      {step.type === 'decision' && step.options.length < 5 && (
                        <Button 
                          size="sm" 
                          variant="outline" 
                          className="text-blue-600 border-blue-300"
                          onClick={() => addDecisionOption(step.id)}
                          title={`Êù°‰ª∂ÂàÜÂ≤ê„ÇíËøΩÂä† (${step.options.length}/5)`}
                        >
                          <GitBranch className="w-4 h-4 mr-1" />
                          ÂàÜÂ≤êËøΩÂä† ({step.options.length}/5)
                        </Button>
                      )}
                    </div>
                  </div>

                  {step.type === 'decision' && (
                    <div className="bg-yellow-50 border border-yellow-200 rounded p-3 mb-3">
                      <p className="text-sm text-yellow-800">
                        <strong>Êù°‰ª∂ÂàÜÂ≤ê„Éé„Éº„Éâ:</strong> „É¶„Éº„Ç∂„Éº„ÅÆÁä∂Ê≥Å„Å´Âøú„Åò„Å¶Áï∞„Å™„Çã„Çπ„ÉÜ„ÉÉ„Éó„Å´ÈÄ≤„ÇÄÂàÜÂ≤êÁÇπ„Åß„Åô„ÄÇ
                        ÂêÑÈÅ∏ÊäûËÇ¢„Å´ÂÖ∑‰ΩìÁöÑ„Å™Êù°‰ª∂„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
                      </p>
                      <p className="text-xs text-yellow-700 mt-1">
                        üí° Êñ∞Ë¶è‰ΩúÊàêÊôÇ„ÇÇÂÜçÁ∑®ÈõÜÊôÇ„ÇÇÂêå„Åò„Çà„ÅÜ„Å´Êù°‰ª∂È†ÖÁõÆ„ÅÆËøΩÂä†„ÉªÂ§âÊõ¥„ÉªÂâäÈô§„ÅåÂèØËÉΩ„Åß„Åô
                      </p>
                      <div className="mt-2 flex gap-2">
                        <Button 
                          size="sm" 
                          variant="outline" 
                          className="text-green-600 border-green-300 hover:bg-green-50"
                          onClick={() => addDecisionOption(step.id)}
                          disabled={step.options.length >= 5}
                        >
                          <Plus className="w-3 h-3 mr-1" />
                          Êù°‰ª∂È†ÖÁõÆËøΩÂä†
                        </Button>
                        <span className="text-xs text-gray-500 self-center">
                          ({step.options.length}/5 È†ÖÁõÆ)
                        </span>
                      </div>
                    </div>
                  )}

                  <div className="space-y-3">
                    {step.options && step.options.length > 0 ? (
                      step.options.map((option, optionIndex) => {
                        console.log(`üîç „É¨„É≥„ÉÄ„É™„É≥„Ç∞‰∏≠ - „Çπ„ÉÜ„ÉÉ„Éó ${step.id} (${step.type}), „Ç™„Éó„Ç∑„Éß„É≥ ${optionIndex + 1}:`, option);
                        return (
                      <div key={`${step.id}-option-${optionIndex}`} className={`border-2 rounded-lg p-4 space-y-3 ${
                        step.type === 'decision' 
                          ? option.conditionType === 'yes' 
                            ? 'border-green-200 bg-green-50' 
                            : option.conditionType === 'no'
                            ? 'border-red-200 bg-red-50'
                            : 'border-blue-200 bg-blue-50'
                          : 'border-gray-200 bg-gray-50'
                      }`}>
                        {/* „Éò„ÉÉ„ÉÄ„ÉºÈÉ®ÂàÜ */}
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-2">
                            <Badge variant={
                              option.conditionType === 'yes' ? 'default' :
                              option.conditionType === 'no' ? 'destructive' : 'secondary'
                            }>
                              {step.type === 'decision' 
                                ? `Êù°‰ª∂ÂàÜÂ≤ê ${optionIndex + 1}` 
                                : `ÈÅ∏ÊäûËÇ¢ ${optionIndex + 1}`
                              }
                            </Badge>
                            {step.type === 'decision' && (
                              <Badge variant="outline" className="text-xs">
                                {option.conditionType === 'yes' && '‚úì „ÅØ„ÅÑ'}
                                {option.conditionType === 'no' && '‚úó „ÅÑ„ÅÑ„Åà'}
                                {option.conditionType === 'other' && '‚Üí „Åù„ÅÆ‰ªñ'}
                              </Badge>
                            )}
                          </div>
                          {((step.type === 'decision' && step.options.length > 2) || 
                            (step.type !== 'decision' && step.options.length > 1)) && (
                            <Button
                              size="sm"
                              variant="ghost"
                              className="text-red-600 hover:text-red-700 hover:bg-red-100"
                              onClick={() => removeOption(step.id, optionIndex)}
                              title="„Åì„ÅÆÈÅ∏ÊäûËÇ¢„ÇíÂâäÈô§"
                            >
                              <Trash2 className="w-4 h-4" />
                            </Button>
                          )}
                        </div>

                        {/* ÈÅ∏ÊäûËÇ¢„ÉÜ„Ç≠„Çπ„Éà */}
                        <div>
                          <Label className="text-sm font-medium">
                            {step.type === 'decision' ? 'ÂàÜÂ≤êÊù°‰ª∂„ÅÆË°®Á§∫„ÉÜ„Ç≠„Çπ„Éà' : 'ÈÅ∏ÊäûËÇ¢„ÅÆ„ÉÜ„Ç≠„Çπ„Éà'}
                          </Label>
                          <Input
                            value={option.text || ''}
                            onChange={(e) => updateOption(step.id, optionIndex, { text: e.target.value })}
                            placeholder={
                              step.type === 'decision' 
                                ? option.conditionType === 'yes' 
                                  ? "„ÅØ„ÅÑÔºà‰æã: „Ç®„É≥„Ç∏„É≥„ÅåÂÆåÂÖ®„Å´ÂÅúÊ≠¢„Åó„Å¶„ÅÑ„ÇãÔºâ"
                                  : option.conditionType === 'no'
                                  ? "„ÅÑ„ÅÑ„ÅàÔºà‰æã: „Åæ„Å†‰∏çÂÆâÂÆö„Å´Âãï‰Ωú„Åó„Å¶„ÅÑ„ÇãÔºâ"
                                  : "„Åù„ÅÆ‰ªñ„ÅÆÁä∂Ê≥ÅÔºà‰æã: Âà§Êñ≠„Åß„Åç„Å™„ÅÑÔºâ"
                                : "ÈÅ∏ÊäûËÇ¢„ÅÆ„ÉÜ„Ç≠„Çπ„Éà"
                            }
                            className="mt-1"
                          />
                        </div>

                        {/* Ë®≠ÂÆöÈ†ÖÁõÆ */}
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                          <div>
                            <Label className="text-sm font-medium">Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„ÉóID</Label>
                            <Input
                              value={option.nextStepId}
                              onChange={(e) => updateOption(step.id, optionIndex, { nextStepId: e.target.value })}
                              placeholder="step_xxx „Åæ„Åü„ÅØ end"
                              className="mt-1"
                            />
                          </div>

                          {step.type === 'decision' && (
                            <div>
                              <Label className="text-sm font-medium">Êù°‰ª∂„Çø„Ç§„Éó</Label>
                              <select
                                value={option.conditionType}
                                onChange={(e) => changeConditionType(step.id, optionIndex, e.target.value as any)}
                                className="w-full border rounded px-3 py-2 mt-1 bg-white"
                              >
                                <option value="yes">‚úì „ÅØ„ÅÑÔºàËÇØÂÆöÁöÑ„Å™ÂõûÁ≠îÔºâ</option>
                                <option value="no">‚úó „ÅÑ„ÅÑ„ÅàÔºàÂê¶ÂÆöÁöÑ„Å™ÂõûÁ≠îÔºâ</option>
                                <option value="other">‚Üí „Åù„ÅÆ‰ªñÔºà‰∏≠Á´ã„Éª‰∏çÊòéÔºâ</option>
                              </select>
                            </div>
                          )}
                        </div>

                        {/* ÁµÇ‰∫Ü„Éï„É©„Ç∞ */}
                        <div className="flex items-center space-x-2 pt-2 border-t border-gray-200">
                          <input
                            type="checkbox"
                            id={`terminal-${step.id}-${optionIndex}`}
                            checked={option.isTerminal}
                            onChange={(e) => updateOption(step.id, optionIndex, { isTerminal: e.target.checked })}
                            className="rounded border-gray-300"
                          />
                          <Label htmlFor={`terminal-${step.id}-${optionIndex}`} className="text-sm">
                            „Åì„ÅÆÈÅ∏ÊäûËÇ¢„Åß„Éï„É≠„Éº„ÇíÁµÇ‰∫Ü„Åô„Çã
                          </Label>
                          {option.isTerminal && (
                            <Badge variant="outline" className="text-xs text-red-600">
                              ÁµÇ‰∫Ü
                            </Badge>
                          )}
                        </div>
                      </div>
                        );
                      })
                    ) : (
                      /* Êù°‰ª∂ÂàÜÂ≤ê„ÅßÈÅ∏ÊäûËÇ¢„Åå„Å™„ÅÑÂ†¥Âêà„ÅÆ„Éí„É≥„Éà */
                      step.type === 'decision' && (
                        <div className="text-center py-8 text-gray-500 border-2 border-dashed border-gray-200 rounded-lg">
                          <GitBranch className="w-12 h-12 mx-auto mb-2 text-gray-300" />
                          <p className="text-sm">Êù°‰ª∂ÂàÜÂ≤ê„ÅÆÈÅ∏ÊäûËÇ¢„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ</p>
                          <p className="text-xs text-gray-400 mt-1">
                            „Äå„ÅØ„ÅÑ„Äç„Äå„ÅÑ„ÅÑ„Åà„Äç„Äå„Åù„ÅÆ‰ªñ„Äç„ÅÆÂàÜÂ≤ê„Çí‰ΩúÊàê„Åß„Åç„Åæ„Åô
                          </p>
                          <Button 
                            size="sm" 
                            variant="outline" 
                            className="mt-3 text-blue-600 border-blue-300"
                            onClick={() => addDecisionOption(step.id)}
                          >
                            <Plus className="w-4 h-4 mr-1" />
                            ÊúÄÂàù„ÅÆÊù°‰ª∂È†ÖÁõÆ„ÇíËøΩÂä†
                          </Button>
                        </div>
                      )
                    )}
                  </div>

                  {/* üéØ Êù°‰ª∂ÂàÜÂ≤ê„Éé„Éº„ÉâÁµ±ÂêàÁ∑®ÈõÜ„Éï„Ç©„Éº„É† - Êñ∞Ë¶è‰ΩúÊàêÊôÇ„Å®ÂêåÁ≠â„ÅÆÁ∑®ÈõÜUIÂ∏∏ÊôÇË°®Á§∫ */}
                  {step.type === 'decision' && (
                    <div className="mt-8 bg-gradient-to-r from-blue-50 to-indigo-50 border-4 border-blue-400 rounded-xl p-8 shadow-2xl">
                      <div className="text-center mb-8">
                        <div className="flex items-center justify-center gap-4 mb-4">
                          <GitBranch className="w-12 h-12 text-blue-600 animate-pulse" />
                          <Badge variant="secondary" className="text-xl px-8 py-3 bg-blue-200 text-blue-800 font-bold shadow-lg">
                            üéõÔ∏è Êù°‰ª∂ÂàÜÂ≤êÁµ±ÂêàÁ∑®ÈõÜ„Éï„Ç©„Éº„É†ÔºàÂ∏∏ÊôÇË°®Á§∫Ôºâ
                          </Badge>
                        </div>
                        <h3 className="text-4xl font-bold text-blue-800 mb-3">
                          üèóÔ∏è „Äå{step.title}„Äç„ÅÆÊù°‰ª∂ÂàÜÂ≤êË®≠ÂÆö
                        </h3>
                        <p className="text-xl text-blue-700 font-medium mb-4">
                          üîß Áµ±ÂêàÁ∑®ÈõÜ„Ç®„É™„Ç¢„Å®„Åó„Å¶Â∏∏ÊôÇË°®Á§∫ - Êñ∞Ë¶è‰ΩúÊàê„ÉªÂÜçÁ∑®ÈõÜ‰∏°ÂØæÂøú
                        </p>
                        <div className="flex justify-center gap-4 mb-6">
                          <div className="inline-flex items-center gap-2 px-6 py-3 bg-blue-100 rounded-lg border-2 border-blue-300">
                            <span className="font-bold text-blue-800 text-lg">
                              üìä {step.options?.length || 0}ÂÄã„ÅÆÂàÜÂ≤êÊù°‰ª∂
                            </span>
                          </div>
                          <div className="inline-flex items-center gap-2 px-6 py-3 bg-green-100 rounded-lg border-2 border-green-300">
                            <span className="font-bold text-green-800 text-lg">
                              ‚úÖ Á∑®ÈõÜ„É¢„Éº„Éâ: „Ç¢„ÇØ„ÉÜ„Ç£„Éñ
                            </span>
                          </div>
                        </div>
                      </div>

                      {/* üéØ Á∑®ÈõÜ„Éï„Ç©„Éº„É†„Å®„Åó„Å¶„ÅÆÊ©üËÉΩ„ÇíÂº∑Âåñ */}
                      <div className="bg-white rounded-xl p-8 border-4 border-blue-300 shadow-2xl">
                        <div className="flex items-center justify-between mb-8">
                          <h4 className="text-3xl font-bold text-gray-800 flex items-center gap-4">
                            <span className="bg-blue-200 px-6 py-3 rounded-xl text-blue-800 shadow-md">üéõÔ∏è</span>
                            Áµ±ÂêàÁ∑®ÈõÜ„Éï„Ç©„Éº„É†
                          </h4>
                          <div className="flex gap-3">
                            <Button 
                              size="lg" 
                              variant="outline" 
                              className="text-green-600 border-green-300 bg-green-50 hover:bg-green-100"
                              onClick={() => addDecisionOption(step.id)}
                              disabled={step.options?.length >= 5}
                            >
                              <Plus className="w-5 h-5 mr-2" />
                              Êù°‰ª∂ËøΩÂä† ({step.options?.length || 0}/5)
                            </Button>
                            <Button size="lg" variant="outline" className="text-blue-600 border-blue-300">
                              <Settings className="w-5 h-5 mr-2" />
                              Ë®≠ÂÆö
                            </Button>
                          </div>
                        </div>

                        {/* üìä Áµ±Ë®àÊÉÖÂ†±Ë°®Á§∫ */}
                        <div className="grid grid-cols-3 gap-4 mb-8 p-4 bg-gray-50 rounded-lg border-2 border-gray-200">
                          <div className="text-center">
                            <div className="text-2xl font-bold text-blue-600">{step.options?.length || 0}</div>
                            <div className="text-sm text-gray-600">ÂàÜÂ≤êÊù°‰ª∂Êï∞</div>
                          </div>
                          <div className="text-center">
                            <div className="text-2xl font-bold text-green-600">
                              {step.options?.filter(opt => opt.nextStepId && opt.nextStepId !== '').length || 0}
                            </div>
                            <div className="text-sm text-gray-600">Êé•Á∂öÊ∏à„Åø</div>
                          </div>
                          <div className="text-center">
                            <div className="text-2xl font-bold text-orange-600">
                              {step.options?.filter(opt => opt.isTerminal).length || 0}
                            </div>
                            <div className="text-sm text-gray-600">ÁµÇ‰∫ÜÊù°‰ª∂</div>
                          </div>
                        </div>

                        {step.options && step.options.length > 0 ? (
                          <div className="space-y-8">
                            {step.options.map((option, optionIndex) => (
                              <div key={`decision-unified-${step.id}-${optionIndex}`} 
                                   className={`border-4 rounded-xl p-8 shadow-lg transition-all duration-300 hover:shadow-xl ${
                                     option.conditionType === 'yes' ? 'bg-green-50 border-green-300' :
                                     option.conditionType === 'no' ? 'bg-red-50 border-red-300' :
                                     'bg-blue-50 border-blue-300'
                                   }`}>

                                {/* „Éò„ÉÉ„ÉÄ„ÉºÈÉ®ÂàÜ„ÇíÂ§ßÂπÖÊîπÂñÑ */}
                                <div className="flex items-center justify-between mb-6 p-4 bg-white rounded-lg border-2 border-gray-200">
                                  <div className="flex items-center gap-4">
                                    <div className={`w-12 h-12 rounded-full flex items-center justify-center text-2xl font-bold text-white ${
                                      option.conditionType === 'yes' ? 'bg-green-500' :
                                      option.conditionType === 'no' ? 'bg-red-500' : 'bg-blue-500'
                                    }`}>
                                      {optionIndex + 1}
                                    </div>
                                    <div>
                                      <Badge variant={
                                        option.conditionType === 'yes' ? 'default' :
                                        option.conditionType === 'no' ? 'destructive' : 'secondary'
                                      } className="text-lg px-6 py-2 mb-2">
                                        ÂàÜÂ≤êÊù°‰ª∂ {optionIndex + 1}
                                      </Badge>
                                      <div className="flex gap-2">
                                        <Badge variant="outline" className="text-base">
                                          {option.conditionType === 'yes' && '‚úÖ „ÅØ„ÅÑÔºàËÇØÂÆöÔºâ'}
                                          {option.conditionType === 'no' && '‚ùå „ÅÑ„ÅÑ„ÅàÔºàÂê¶ÂÆöÔºâ'}
                                          {option.conditionType === 'other' && 'üî∏ „Åù„ÅÆ‰ªñÔºà‰∏≠Á´ãÔºâ'}
                                        </Badge>
                                        {option.isTerminal && (
                                          <Badge variant="destructive" className="text-base">
                                            üèÅ „Éï„É≠„ÉºÁµÇ‰∫Ü
                                          </Badge>
                                        )}
                                      </div>
                                    </div>
                                  </div>

                                  {/* ÂâäÈô§„Éú„Çø„É≥„ÇíÂè≥‰∏ä„Å´ÈÖçÁΩÆ */}
                                  {((step.options?.length || 0) > 2) && (
                                    <Button
                                      size="sm"
                                      variant="destructive"
                                      onClick={() => removeOption(step.id, optionIndex)}
                                      className="hover:scale-110 transition-transform"
                                    >
                                      <Trash2 className="w-4 h-4 mr-1" />
                                      ÂâäÈô§
                                    </Button>
                                  )}
                                </div>

                                <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                                  {/* Âü∫Êú¨Ë®≠ÂÆö„Çª„ÇØ„Ç∑„Éß„É≥ */}
                                  <div className="space-y-6">
                                    <div className="bg-white p-4 rounded-lg border-2 border-gray-200">
                                      <h5 className="text-lg font-bold text-gray-700 mb-4 flex items-center gap-2">
                                        <span className="bg-blue-100 p-2 rounded">üìù</span>
                                        Âü∫Êú¨Ë®≠ÂÆö
                                      </h5>

                                      <div>
                                        <Label className="text-base font-bold text-gray-700">üìù Êù°‰ª∂„ÉÜ„Ç≠„Çπ„Éà</Label>
                                        <Input
                                          value={option.text || ''}
                                          onChange={(e) => updateOption(step.id, optionIndex, { text: e.target.value })}
                                          placeholder="Êù°‰ª∂„ÅÆË°®Á§∫„ÉÜ„Ç≠„Çπ„Éà"
                                          className="mt-2 border-2 border-gray-300 focus:border-blue-500 text-base"
                                        />
                                      </div>

                                      <div>
                                        <Label className="text-base font-bold text-gray-700">üéØ Êù°‰ª∂„Çø„Ç§„Éó</Label>
                                        <select
                                          value={option.conditionType || 'other'}
                                          onChange={(e) => changeConditionType(step.id, optionIndex, e.target.value as any)}
                                          className="w-full mt-2 p-3 border-2 border-gray-300 rounded-lg text-base bg-white focus:border-blue-500"
                                        >
                                          <option value="yes">‚úÖ „ÅØ„ÅÑÔºàËÇØÂÆöÁöÑ„Å™ÂõûÁ≠îÔºâ</option>
                                          <option value="no">‚ùå „ÅÑ„ÅÑ„ÅàÔºàÂê¶ÂÆöÁöÑ„Å™ÂõûÁ≠îÔºâ</option>
                                          <option value="other">üî∏ „Åù„ÅÆ‰ªñÔºà‰∏≠Á´ã„Éª‰∏çÊòéÔºâ</option>
                                        </select>
                                      </div>
                                    </div>

                                    {/* Ë©≥Á¥∞Êù°‰ª∂ */}
                                    <div className="space-y-4">
                                      <div>
                                        <Label className="text-base font-bold text-gray-700">üìã Ë©≥Á¥∞Êù°‰ª∂„ÉªË™¨Êòé</Label>
                                        <Textarea
                                          value={option.condition || ''}
                                          onChange={(e) => updateOption(step.id, optionIndex, { condition: e.target.value })}
                                          placeholder="„Åì„ÅÆÊù°‰ª∂„Å´Ë©≤ÂΩì„Åô„ÇãÂ†¥Âêà„ÅÆË©≥Á¥∞Ë™¨Êòé„ÇíË®òËø∞„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                                          rows={8}
                                          className="mt-2 border-2 border-gray-300 focus:border-blue-500 text-base"
                                        />
                                      </div>
                                    </div>

                                    {/* ÈÅ∑ÁßªË®≠ÂÆö */}
                                    <div className="space-y-4">
                                      <div>
                                        <Label className="text-base font-bold text-gray-700">üîó ÈÅ∑ÁßªÂÖà„Çπ„É©„Ç§„Éâ</Label>
                                        <select
                                          value={option.nextStepId || ''}
                                          onChange={(e) => updateOption(step.id, optionIndex, { nextStepId: e.target.value })}
                                          className="w-full mt-2 p-3 border-2 border-gray-300 rounded-lg text-base bg-white focus:border-blue-500"
                                        >
                                          <option value="">ÈÅ∑ÁßªÂÖà„ÇíÈÅ∏Êäû</option>
                                          {editedFlow?.steps
                                            .filter(s => s.id !== step.id)
                                            .map((targetStep, targetIndex) => (
                                            <option key={`unified-target-${targetStep.id}`} value={targetStep.id}>
                                              „Çπ„É©„Ç§„Éâ{targetIndex + 1}: {targetStep.title}
                                            </option>
                                          ))}
                                          <option value="end">üèÅ „Éï„É≠„ÉºÁµÇ‰∫Ü</option>
                                        </select>
                                      </div>

                                      <div className="flex items-center p-4 bg-gray-100 border-2 border-gray-300 rounded-lg">
                                        <input
                                          type="checkbox"
                                          id={`unified-terminal-${step.id}-${optionIndex}`}
                                          checked={Boolean(option.isTerminal)}
                                          onChange={(e) => updateOption(step.id, optionIndex, { isTerminal: e.target.checked })}
                                          className="mr-4 h-5 w-5"
                                        />
                                        <Label htmlFor={`unified-terminal-${step.id}-${optionIndex}`} className="text-base text-gray-700 font-bold">
                                          üèÅ „Åì„ÅÆÈÅ∏ÊäûËÇ¢„Åß„Éï„É≠„Éº„ÇíÁµÇ‰∫Ü„Åô„Çã
                                        </Label>
                                      </div>

                                      {((step.options?.length || 0) > 2) && (
                                        <Button
                                          size="sm"
                                          variant="destructive"
                                          onClick={() => removeOption(step.id, optionIndex)}
                                          className="w-full"
                                        >
                                          <Trash2 className="w-4 h-4 mr-2" />
                                          „Åì„ÅÆÈÅ∏ÊäûËÇ¢„ÇíÂâäÈô§
                                        </Button>
                                      )}
                                    </div>
                                  </div>
                                </div>
                              </div>
                            ))}
                          </div>
                        ) : (
                          <div className="text-center py-8 text-gray-500">
                            <p className="text-lg">„Åæ„Å†Êù°‰ª∂ÂàÜÂ≤ê„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì</p>
                            <p className="text-base text-gray-400 mt-2">
                              „ÄåÂàÜÂ≤êËøΩÂä†„Äç„Éú„Çø„É≥„Åã„ÇâÊù°‰ª∂„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ
                            </p>
                          </div>
                        )}
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
};

export default EmergencyFlowEditor;