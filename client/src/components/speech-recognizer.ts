import {
  AudioConfig,
  ResultReason,
  SpeechConfig,
  SpeechRecognizer,
} from 'microsoft-cognitiveservices-speech-sdk';

export interface ISpeechRecognizer {
  start(): void;
  stop(): void;
  sendToServer?: (text: string) => void;
}

export class AzureSpeechRecognizer implements ISpeechRecognizer {
  private recognizer: SpeechRecognizer | null = null;
  private accumulatedText: string = '';
  private lastSpokenTime: number = 0;
  private silenceCheckInterval: any = null;
  private textBuffer: string[] = [];

  // ÂÖ±ÈÄö„Éë„É©„É°„Éº„Çø
  private readonly SILENCE_DETECTION_TIME = 1000; // ÁÑ°Èü≥Ê§úÁü•: 1Áßí
  private readonly AUTO_STOP_TIME = 10000; // Ëá™ÂãïÂÅúÊ≠¢: 10Áßí
  private readonly CHECK_INTERVAL = 200; // „ÉÅ„Çß„ÉÉ„ÇØÈñìÈöî: 200ms

  constructor(private azureKey: string, private azureRegion: string) {}

  start() {
    console.log('üé§ AzureÈü≥Â£∞Ë™çË≠òÈñãÂßã');
    console.log('üîë AzureË®≠ÂÆöÁ¢∫Ë™ç:', { 
      key: this.azureKey ? `${this.azureKey.substring(0, 10)}...` : '„Å™„Åó',
      region: this.azureRegion 
    });

    const speechConfig = SpeechConfig.fromSubscription(this.azureKey, this.azureRegion);
    speechConfig.speechRecognitionLanguage = 'ja-JP';
    speechConfig.setProperty('SpeechServiceConnection_InitialSilenceTimeoutMs', '3000');
    speechConfig.setProperty('SpeechServiceConnection_EndSilenceTimeoutMs', '1000');

    console.log('üéôÔ∏è „Éû„Ç§„ÇØ„É≠„Éï„Ç©„É≥„Ç¢„ÇØ„Çª„Çπ„ÇíË¶ÅÊ±Ç‰∏≠...');
    const audioConfig = AudioConfig.fromDefaultMicrophoneInput();
    this.recognizer = new SpeechRecognizer(speechConfig, audioConfig);
    console.log('üéØ SpeechRecognizer‰ΩúÊàêÂÆå‰∫Ü');

    this.recognizer.recognizing = (_, e) => {
      console.log('üéØ AzureË™çË≠ò‰∏≠:', e.result.text);
      if (e.result.text.trim()) {
        this.accumulatedText = e.result.text;
        this.lastSpokenTime = Date.now();
      }
    };

    this.recognizer.recognized = (_, e) => {
      console.log('‚úÖ AzureË™çË≠òÂÆå‰∫Ü:', e.result.text, 'Reason:', e.result.reason);
      if (e.result.reason === ResultReason.RecognizedSpeech && e.result.text.trim()) {
        this.textBuffer.push(e.result.text.trim());
        this.lastSpokenTime = Date.now();
        console.log('üìã „Éê„ÉÉ„Éï„Ç°„Å´ËøΩÂä†:', e.result.text.trim());
      }
    };

    this.recognizer.startContinuousRecognitionAsync(
      () => console.log('‚úÖ AzureË™çË≠òÈñãÂßãÊàêÂäü'),
      (error) => console.error('‚ùå AzureË™çË≠òÈñãÂßã„Ç®„É©„Éº:', error)
    );

    this.silenceCheckInterval = setInterval(() => {
      const now = Date.now();
      const silenceDuration = now - this.lastSpokenTime;

      // 1Áßí„ÅÆÁÑ°Èü≥Ê§úÁü•„Åß„Éê„ÉÉ„Éï„Ç°ÂÜÖÂÆπ„ÇíÈÄÅ‰ø°
      if (silenceDuration > this.SILENCE_DETECTION_TIME && this.textBuffer.length > 0) {
        const combinedText = this.textBuffer.join(' ').trim();
        if (combinedText) {
          console.log('üì§ AzureÈÄÅ‰ø°:', combinedText);
          this.sendToServer?.(combinedText);
        }
        this.textBuffer = [];
        this.accumulatedText = '';
      }

      // 10Áßí„ÅßËá™ÂãïÂÅúÊ≠¢
      if (silenceDuration > this.AUTO_STOP_TIME) {
        this.stop();
      }
    }, this.CHECK_INTERVAL);
  }

  stop() {
    if (this.recognizer) {
      this.recognizer.stopContinuousRecognitionAsync(() => {
        this.recognizer?.close();
        this.recognizer = null;
      });
    }
    clearInterval(this.silenceCheckInterval);
  }

  sendToServer?: (text: string) => void;

  private getReasonText(reason: ResultReason): string {
    switch (reason) {
      case ResultReason.RecognizedSpeech:
        return 'RecognizedSpeech (Èü≥Â£∞Ë™çË≠òÊàêÂäü)';
      case ResultReason.NoMatch:
        return 'NoMatch (Èü≥Â£∞Ê§úÂá∫„Å™„Åó)';
      case ResultReason.Canceled:
        return 'Canceled („Ç≠„É£„É≥„Çª„É´)';
      default:
        return `Unknown (${reason})`;
    }
  }
}

export class WebSpeechRecognizer implements ISpeechRecognizer {
  private recognition: SpeechRecognition;
  private accumulatedText: string = '';
  private lastSpokenTime: number = 0;
  private silenceCheckInterval: any = null;
  private textBuffer: string[] = [];
  public sendToServer?: (text: string) => void;

  // ÂÖ±ÈÄö„Éë„É©„É°„Éº„Çø
  private readonly SILENCE_DETECTION_TIME = 1000; // ÁÑ°Èü≥Ê§úÁü•: 1Áßí
  private readonly AUTO_STOP_TIME = 10000; // Ëá™ÂãïÂÅúÊ≠¢: 10Áßí
  private readonly CHECK_INTERVAL = 200; // „ÉÅ„Çß„ÉÉ„ÇØÈñìÈöî: 200ms

  constructor() {
    console.log('üåê WebSpeechÂàùÊúüÂåñÈñãÂßã');
    const SpeechRecognition =
      (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition;

    console.log('üîç WebSpeech API „Çµ„Éù„Éº„ÉàÁ¢∫Ë™ç:', {
      webkitSpeechRecognition: !!(window as any).webkitSpeechRecognition,
      SpeechRecognition: !!(window as any).SpeechRecognition,
      userAgent: navigator.userAgent
    });

    if (!SpeechRecognition) {
      console.error('‚ùå Web Speech API not supported');
      throw new Error('Web Speech API not supported');
    }

    this.recognition = new SpeechRecognition();
    console.log('‚úÖ WebSpeechË™çË≠ò„Ç®„É≥„Ç∏„É≥‰ΩúÊàêÂÆå‰∫Ü');
    this.recognition.lang = 'ja-JP';
    this.recognition.interimResults = true;
    this.recognition.continuous = true;

    this.recognition.onresult = (event: SpeechRecognitionEvent) => {
      console.log('üéØ WebSpeechÁµêÊûúÂèó‰ø°:', event.results.length, '‰ª∂');
      for (let i = event.resultIndex; i < event.results.length; i++) {
        const result = event.results[i];
        console.log(`üìù ÁµêÊûú${i}:`, result[0].transcript, 'isFinal:', result.isFinal);
        if (result.isFinal && result[0].transcript.trim()) {
          this.textBuffer.push(result[0].transcript.trim());
          this.lastSpokenTime = Date.now();
          console.log('üìã WebSpeech„Éê„ÉÉ„Éï„Ç°„Å´ËøΩÂä†:', result[0].transcript.trim());
        }
      }
    };

    this.recognition.onend = () => {
      console.log('üîÑ WebSpeechË™çË≠òÁµÇ‰∫Ü - ÂÜçÈñãÂßã„Åó„Åæ„Åô');
      if (this.silenceCheckInterval) {
        this.start();
      }
    };

    this.recognition.onerror = (event) => {
      console.error('‚ùå WebSpeechË™çË≠ò„Ç®„É©„Éº:', event.error);
    };

    this.recognition.onstart = () => {
      console.log('üü¢ WebSpeechË™çË≠òÈñãÂßã„Ç§„Éô„É≥„Éà');
    };

    this.recognition.onstop = () => {
      console.log('üî¥ WebSpeechË™çË≠òÂÅúÊ≠¢„Ç§„Éô„É≥„Éà');
    };
  }

  start() {
    console.log('üé§ WebSpeechÈü≥Â£∞Ë™çË≠òÈñãÂßã');

    // „Éû„Ç§„ÇØ„Ç¢„ÇØ„Çª„ÇπË®±ÂèØ„ÇíÊòéÁ§∫ÁöÑ„Å´Á¢∫Ë™ç
    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
      navigator.mediaDevices.getUserMedia({ audio: true })
        .then(() => {
          console.log('‚úÖ „Éû„Ç§„ÇØ„Ç¢„ÇØ„Çª„ÇπË®±ÂèØÊ∏à„Åø');
          this.recognition.start();
          this.lastSpokenTime = Date.now();
        })
        .catch((error) => {
          console.error('‚ùå „Éû„Ç§„ÇØ„Ç¢„ÇØ„Çª„ÇπÊãíÂê¶:', error);
        });
    } else {
      console.log('‚ö†Ô∏è getUserMedia„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì - Áõ¥Êé•ÈñãÂßã„Åó„Åæ„Åô');
      this.recognition.start();
      this.lastSpokenTime = Date.now();
    }

    this.silenceCheckInterval = setInterval(() => {
      const now = Date.now();
      const silenceDuration = now - this.lastSpokenTime;

      // 1Áßí„ÅÆÁÑ°Èü≥Ê§úÁü•„Åß„Éê„ÉÉ„Éï„Ç°ÂÜÖÂÆπ„ÇíÈÄÅ‰ø°
      if (silenceDuration > this.SILENCE_DETECTION_TIME && this.textBuffer.length > 0) {
        const combinedText = this.textBuffer.join(' ').trim();
        if (combinedText) {
          console.log('üì§ WebSpeechÈÄÅ‰ø°:', combinedText);
          this.sendToServer?.(combinedText);
        }
        this.textBuffer = [];
        this.accumulatedText = '';
      }

      // 10Áßí„ÅßËá™ÂãïÂÅúÊ≠¢
      if (silenceDuration > this.AUTO_STOP_TIME) {
        this.stop();
      }
    }, this.CHECK_INTERVAL);
  }

  stop() {
    this.recognition.stop();
    clearInterval(this.silenceCheckInterval);
  }
}

export function createSpeechRecognizer(azureKey: string, azureRegion: string): ISpeechRecognizer {
  if (isIOS() && isSafari()) {
    return new WebSpeechRecognizer();
  } else {
    return new AzureSpeechRecognizer(azureKey, azureRegion);
  }
}



function isIOS(): boolean {
  return /iP(hone|od|ad)/.test(navigator.platform);
}

function isSafari(): boolean {
  return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
}