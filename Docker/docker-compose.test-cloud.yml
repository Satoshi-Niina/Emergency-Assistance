version: '3.8'

services:
  # PostgreSQL Database (Test Cloud)
  postgres:
    image: postgres:15-alpine
    container_name: emergency_assistance_db_test
    environment:
      POSTGRES_DB: emergency_assistance_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: testpassword123
    ports:
      - "5432:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./data/postgres/test:/backup
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - emergency_test_network

  # S3FS Mount Service (Test)
  s3fs-test:
    image: s3fs/s3fs:latest
    container_name: emergency_assistance_s3fs_test
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-test-key}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-test-secret}
      - S3_BUCKET=${S3_BUCKET:-test-bucket}
      - S3_REGION=${S3_REGION:-us-east-1}
    volumes:
      - s3_test_data:/mnt/s3
    command: >
      s3fs ${S3_BUCKET:-test-bucket} /mnt/s3
      -o use_path_request_style
      -o allow_other
      -o nonempty
      -o passwd_file=/etc/passwd-s3fs
      -o url=http://s3:9000
      -o use_path_request_style
    restart: unless-stopped
    networks:
      - emergency_test_network
    depends_on:
      - s3-test

  # MinIO S3 Compatible Storage (Test)
  s3-test:
    image: minio/minio:latest
    container_name: emergency_assistance_minio_test
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_test_data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped
    networks:
      - emergency_test_network

  # Backend API Server (Test Cloud)
  server:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: emergency_assistance_server_test
    environment:
      - NODE_ENV=test
      - DATABASE_URL=postgresql://postgres:testpassword123@postgres:5432/emergency_assistance_test
      - SESSION_SECRET=test-session-secret-123
      - PORT=3001
      - OPENAI_API_KEY=${OPENAI_API_KEY:-test-openai-key}
      - FRONTEND_URL=http://localhost:5002
      - LOG_LEVEL=debug
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-minioadmin}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-minioadmin123}
      - S3_BUCKET=${S3_BUCKET:-test-bucket}
      - S3_REGION=${S3_REGION:-us-east-1}
      - S3_ENDPOINT=http://s3-test:9000
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      s3-test:
        condition: service_started
    volumes:
      - s3_test_data:/app/storage
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./server:/app/server
      - ./shared:/app/shared
      - ./migrations:/app/migrations
    restart: unless-stopped
    networks:
      - emergency_test_network
    command: npm run dev:server

  # Frontend Client (Test Cloud)
  client:
    build:
      context: .
      dockerfile: Dockerfile.client.dev
    container_name: emergency_assistance_client_test
    environment:
      - VITE_API_BASE_URL=http://localhost:3001
      - NODE_ENV=test
    ports:
      - "5002:5002"
    depends_on:
      - server
    volumes:
      - s3_test_data:/app/storage
      - ./logs:/app/logs
      - ./client:/app
    restart: unless-stopped
    networks:
      - emergency_test_network
    command: npm run dev

  # Database Studio (Test)
  studio:
    image: node:18-alpine
    container_name: emergency_assistance_studio_test
    working_dir: /app
    environment:
      - DATABASE_URL=postgresql://postgres:testpassword123@postgres:5432/emergency_assistance_test
    ports:
      - "4983:4983"
    depends_on:
      - postgres
    volumes:
      - ./server:/app
      - ./migrations:/app/migrations
      - ./drizzle.config.ts:/app/drizzle.config.ts
    networks:
      - emergency_test_network
    command: npx drizzle-kit studio --port 4983

  # Test Data Loader
  test-data:
    image: postgres:15-alpine
    container_name: emergency_assistance_test_data
    environment:
      - POSTGRES_PASSWORD=testpassword123
    volumes:
      - ./scripts/test-data.sql:/test-data.sql
    depends_on:
      - postgres
    networks:
      - emergency_test_network
    command: >
      sh -c "
        sleep 10;
        psql -h postgres -U postgres -d emergency_assistance_test -f /test-data.sql;
        echo 'Test data loaded successfully';
      "
    profiles:
      - test-data

volumes:
  postgres_test_data:
    driver: local
  s3_test_data:
    driver: local
  minio_test_data:
    driver: local

networks:
  emergency_test_network:
    driver: bridge 