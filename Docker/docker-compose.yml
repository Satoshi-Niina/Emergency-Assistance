version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: emergency_assistance_db
    environment:
      POSTGRES_DB: emergency_assistance
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - emergency_network

  # Backend API Server
  server:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: emergency_assistance_server
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/emergency_assistance
      - SESSION_SECRET=${SESSION_SECRET}
      - PORT=3001
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:5002}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    restart: unless-stopped
    networks:
      - emergency_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Client
  client:
    build:
      context: .
      dockerfile: Dockerfile.client
    container_name: emergency_assistance_client
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:3001}
      - NODE_ENV=${NODE_ENV:-production}
    ports:
      - "5002:5002"
    depends_on:
      - server
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - emergency_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: emergency_assistance_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - client
      - server
    restart: unless-stopped
    networks:
      - emergency_network
    profiles:
      - nginx

volumes:
  postgres_data:
    driver: local

networks:
  emergency_network:
    driver: bridge 