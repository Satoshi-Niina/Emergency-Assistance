version: '3.8'

services:
  # PostgreSQL Database (Development)
  postgres:
    image: postgres:15-alpine
    container_name: emergency_assistance_db_dev
    environment:
      POSTGRES_DB: emergency_assistance_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./data/postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - emergency_dev_network

  # Backend API Server (Development)
  server:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: emergency_assistance_server_dev
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/emergency_assistance_dev
      - SESSION_SECRET=${SESSION_SECRET:-dev-secret-key}
      - PORT=3001
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FRONTEND_URL=http://localhost:5002
      - LOG_LEVEL=debug
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./server:/app/server
      - ./shared:/app/shared
      - ./migrations:/app/migrations
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - /app/node_modules
      - /app/server/node_modules
      - /app/shared/node_modules
    restart: unless-stopped
    networks:
      - emergency_dev_network
    command: npm run dev:server

  # Frontend Client (Development)
  client:
    build:
      context: .
      dockerfile: Dockerfile.client.dev
    container_name: emergency_assistance_client_dev
    environment:
      - VITE_API_BASE_URL=http://localhost:3001
      - NODE_ENV=development
    ports:
      - "5002:5002"
    depends_on:
      - server
    volumes:
      - ./client:/app
      - /app/node_modules
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - emergency_dev_network
    command: npm run dev

  # Drizzle Studio (Database Management)
  studio:
    image: node:18-alpine
    container_name: emergency_assistance_studio
    working_dir: /app
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/emergency_assistance_dev
    ports:
      - "4983:4983"
    depends_on:
      - postgres
    volumes:
      - ./server:/app
      - ./migrations:/app/migrations
      - ./drizzle.config.ts:/app/drizzle.config.ts
    networks:
      - emergency_dev_network
    command: npx drizzle-kit studio --port 4983
    profiles:
      - studio

volumes:
  postgres_dev_data:
    driver: local

networks:
  emergency_dev_network:
    driver: bridge 