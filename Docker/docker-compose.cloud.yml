version: '3.8'

services:
  # PostgreSQL Database (Cloud)
  postgres:
    image: postgres:15-alpine
    container_name: emergency_assistance_db_cloud
    environment:
      POSTGRES_DB: emergency_assistance
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_cloud_data:/var/lib/postgresql/data
      - ./data/postgres/backup:/backup
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - emergency_cloud_network

  # S3FS Mount Service
  s3fs:
    image: s3fs/s3fs:latest
    container_name: emergency_assistance_s3fs
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BUCKET}
      - S3_REGION=${S3_REGION:-us-east-1}
    volumes:
      - s3_data:/mnt/s3
    command: >
      s3fs ${S3_BUCKET} /mnt/s3
      -o use_path_request_style
      -o allow_other
      -o nonempty
      -o passwd_file=/etc/passwd-s3fs
    restart: unless-stopped
    networks:
      - emergency_cloud_network
    profiles:
      - s3

  # Backend API Server (Cloud)
  server:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: emergency_assistance_server_cloud
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/emergency_assistance
      - SESSION_SECRET=${SESSION_SECRET}
      - PORT=3001
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FRONTEND_URL=${FRONTEND_URL}
      - LOG_LEVEL=info
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BUCKET}
      - S3_REGION=${S3_REGION:-us-east-1}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - s3_data:/app/storage  # S3ストレージをマウント
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    restart: unless-stopped
    networks:
      - emergency_cloud_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 60s
      timeout: 10s
      retries: 3

  # Frontend Client (Cloud)
  client:
    build:
      context: .
      dockerfile: Dockerfile.client
    container_name: emergency_assistance_client_cloud
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL}
      - NODE_ENV=production
    ports:
      - "5002:5002"
    depends_on:
      - server
    volumes:
      - s3_data:/app/storage  # S3ストレージをマウント
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - emergency_cloud_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002"]
      interval: 60s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Cloud)
  nginx:
    image: nginx:alpine
    container_name: emergency_assistance_nginx_cloud
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.cloud.conf:/etc/nginx/nginx.conf
      - ./nginx/default.cloud.conf:/etc/nginx/conf.d/default.conf
      - ./logs/nginx:/var/log/nginx
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - client
      - server
    restart: unless-stopped
    networks:
      - emergency_cloud_network

  # Cloud Backup Service
  cloud-backup:
    image: postgres:15-alpine
    container_name: emergency_assistance_cloud_backup
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BUCKET}
    volumes:
      - ./data/postgres/backup:/backup
      - ./scripts:/scripts
    depends_on:
      - postgres
    networks:
      - emergency_cloud_network
    command: >
      sh -c "
        while true; do
          sleep 86400;
          pg_dump -h postgres -U ${POSTGRES_USER:-postgres} -d emergency_assistance > /backup/backup_$$(date +%Y%m%d_%H%M%S).sql;
          aws s3 sync /backup s3://${S3_BUCKET}/backups/;
          find /backup -name 'backup_*.sql' -mtime +7 -delete;
        done
      "
    profiles:
      - backup

volumes:
  postgres_cloud_data:
    driver: local
  s3_data:
    driver: local

networks:
  emergency_cloud_network:
    driver: bridge 