version: '3.8'

services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: emergency_assistance_db_prod
    environment:
      POSTGRES_DB: emergency_assistance
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "127.0.0.1:5432:5432"  # Only local access
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./data/postgres/backup:/backup
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - emergency_prod_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Backend API Server (Production)
  server:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: emergency_assistance_server_prod
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/emergency_assistance
      - SESSION_SECRET=${SESSION_SECRET}
      - PORT=3001
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FRONTEND_URL=${FRONTEND_URL}
      - LOG_LEVEL=info
    ports:
      - "127.0.0.1:3001:3001"  # Only local access
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./backups:/app/backups
    restart: unless-stopped
    networks:
      - emergency_prod_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 60s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Frontend Client (Production)
  client:
    build:
      context: .
      dockerfile: Dockerfile.client
    container_name: emergency_assistance_client_prod
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL}
      - NODE_ENV=production
    ports:
      - "127.0.0.1:5002:5002"  # Only local access
    depends_on:
      - server
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - emergency_prod_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002"]
      interval: 60s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: emergency_assistance_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/default.prod.conf:/etc/nginx/conf.d/default.conf
      - ./logs/nginx:/var/log/nginx
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - client
      - server
    restart: unless-stopped
    networks:
      - emergency_prod_network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: emergency_assistance_backup
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./data/postgres/backup:/backup
      - ./scripts:/scripts
    depends_on:
      - postgres
    networks:
      - emergency_prod_network
    command: >
      sh -c "
        while true; do
          sleep 86400;
          pg_dump -h postgres -U ${POSTGRES_USER:-postgres} -d emergency_assistance > /backup/backup_$$(date +%Y%m%d_%H%M%S).sql;
          find /backup -name 'backup_*.sql' -mtime +7 -delete;
        done
      "
    profiles:
      - backup

volumes:
  postgres_prod_data:
    driver: local

networks:
  emergency_prod_network:
    driver: bridge 