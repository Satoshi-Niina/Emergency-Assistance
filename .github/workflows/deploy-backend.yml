name: Deploy Backend to Azure App Service

on:
  push:
    branches:
      - main
      - backup-clean
    paths:
      - "server/**"
      - ".github/workflows/deploy-backend.yml"
      - "trigger.txt"
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    name: Build and Deploy Backend
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'server/package-lock.json'

      - name: Install dependencies
        working-directory: server
        run: npm ci --production=false

      - name: Build backend
        working-directory: server
        run: |
          echo "=== Building backend with CommonJS ==="
          # CommonJS TypeScript compilation for better Azure App Service compatibility
          npx tsc index-minimal.ts --outDir dist --module CommonJS --target ES2020 --skipLibCheck --esModuleInterop --allowSyntheticDefaultImports
          
          # Ensure index.js exists for Azure App Service
          if [ -f "dist/index-minimal.js" ]; then
            mv dist/index-minimal.js dist/index.js
            echo "‚úÖ Renamed index-minimal.js to index.js"
          else
            echo "‚ùå Build failed: index-minimal.js not found"
            exit 1
          fi
          
          echo "=== Build completed ==="
          ls -la dist/

      - name: Prepare deployment package
        working-directory: server
        run: |
          echo "=== Preparing deployment package ==="
          
          mkdir -p ../deploy-backend
          cp -r dist/* ../deploy-backend/
          cp package.json ../deploy-backend/
          cp package-lock.json ../deploy-backend/
          
          # Ensure web.config exists for IIS
          if [ -f web.config ]; then
            cp web.config ../deploy-backend/
          else
            echo '<?xml version="1.0" encoding="utf-8"?>' > ../deploy-backend/web.config
            echo '<configuration>' >> ../deploy-backend/web.config
            echo '  <system.webServer>' >> ../deploy-backend/web.config
            echo '    <handlers>' >> ../deploy-backend/web.config
            echo '      <add name="iisnode" path="index.js" verb="*" modules="iisnode" />' >> ../deploy-backend/web.config
            echo '    </handlers>' >> ../deploy-backend/web.config
            echo '  </system.webServer>' >> ../deploy-backend/web.config
            echo '</configuration>' >> ../deploy-backend/web.config
            echo "‚úÖ Created web.config"
          fi
          
          cd ../deploy-backend
          npm ci --production --no-optional
          
          echo "=== Package verification ==="
          ls -la *.js *.json *.config 2>/dev/null || true
          echo "Total files: $(find . -type f | wc -l)"

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: emergencyassistance-sv
          slot-name: Production 
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: deploy-backend

      - name: Health check
        run: |
          echo "üîç Starting comprehensive health check..."
          app_url="https://emergencyassistance-sv-fbanemhrbshuf9bd.japanwest-01.azurewebsites.net"
          
          # Extended wait for deployment to complete and app to start
          echo "‚è≥ Waiting for deployment and app startup (90 seconds)..."
          sleep 90
          
          # Check root endpoint with retries
          echo "üîç Checking root endpoint: ${app_url}/"
          for i in {1..5}; do
            root_code=$(curl -o /dev/null -s -w "%{http_code}" -L "${app_url}/")
            echo "Attempt $i - Root endpoint status: $root_code"
            
            if [ "$root_code" = "200" ] || [ "$root_code" = "302" ]; then
              echo "‚úÖ Root endpoint accessible"
              break
            fi
            
            if [ $i -lt 5 ]; then
              echo "‚è≥ Retrying in 15 seconds..."
              sleep 15
            fi
          done
          
          # Check health endpoint with retries
          echo "üîç Checking health endpoint: ${app_url}/health"
          for i in {1..5}; do
            health_code=$(curl -o /dev/null -s -w "%{http_code}" -L "${app_url}/health")
            echo "Attempt $i - Health endpoint status: $health_code"
            
            if [ "$health_code" = "200" ]; then
              echo "‚úÖ Health check passed"
              exit 0
            fi
            
            if [ $i -lt 5 ]; then
              echo "‚è≥ Retrying health check in 15 seconds..."
              sleep 15
            fi
          done
          
          # If health check fails, get diagnostic information
          echo "‚ùå Health check failed after multiple attempts"
          echo "=== Diagnostic Information ==="
          
          # Get response headers and body
          echo "Response headers for root endpoint:"
          curl -I -s "${app_url}/" || echo "Failed to get headers"
          
          echo "Response body sample for root endpoint:"
          curl -s "${app_url}/" | head -20 || echo "Failed to get body"
          
          echo "Response headers for health endpoint:"
          curl -I -s "${app_url}/health" || echo "Failed to get health headers"
          
          echo "Response body for health endpoint:"
          curl -s "${app_url}/health" || echo "Failed to get health response"
          
          # Continue with warning instead of failing the deployment
          echo "‚ö†Ô∏è Health check failed but deployment completed. Manual verification needed."
          exit 0