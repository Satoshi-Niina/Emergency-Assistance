name: Deploy Backend

'on':
  push:
    branches: [ main, backup-clean ]
    paths:
      - "server/**"
      - ".github/workflows/deploy-backend.yml"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-backend-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash -euo pipefail

env:
  APP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }}   # 例: Emergencyassistance-sv
  PACKAGE_PATH: server
  NODE_VERSION: "20"

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    # すべての必須シークレットが空でないことを明示（!= はOK、単項!は使わない）
    if: ${{ secrets.AZURE_CLIENT_ID != '' && secrets.AZURE_TENANT_ID != '' && secrets.AZURE_SUBSCRIPTION_ID != '' && secrets.AZURE_WEBAPP_NAME != '' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 念押しの不足チェック（どれか空なら即Fail）
      - name: Check OIDC secrets
        if: ${{ secrets.AZURE_CLIENT_ID == '' || secrets.AZURE_TENANT_ID == '' || secrets.AZURE_SUBSCRIPTION_ID == '' || secrets.AZURE_WEBAPP_NAME == '' }}
        run: |
          echo "::error:: Missing OIDC secrets (AZURE_CLIENT_ID / AZURE_TENANT_ID / AZURE_SUBSCRIPTION_ID / AZURE_WEBAPP_NAME)"
          exit 1

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: server/package-lock.json

      - name: Verify package folder exists
        run: |
          test -d "${PACKAGE_PATH}" || (echo "::error:: package path '${PACKAGE_PATH}' not found" && exit 1)

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Web App (source package)
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.APP_NAME }}
          package: ${{ env.PACKAGE_PATH }}

      - name: Warmup & Health check
        run: |
          APP_LOWER="$(printf "%s" "${APP_NAME}" | tr '[:upper:]' '[:lower:]')"
          URL="https://${APP_LOWER}.azurewebsites.net/health"
          echo "Check: $URL"
          for i in {1..12}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || true)
            echo "try#$i -> $code"
            if [ "$code" = "200" ]; then exit 0; fi
            sleep 5
          done
          echo "::error:: Health check failed"; exit 1
